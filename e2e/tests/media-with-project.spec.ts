import { test, expect } from "@playwright/test"
import { TEST_DATA_PATH } from "./test-data"
import { selectors } from "./selectors"

test.describe("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º", () => {
  test("–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏", async ({ page }) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await page.goto("/")
    await page.waitForLoadState("networkidle")
    
    console.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await expect(page.locator("div.min-h-screen")).toBeVisible({ timeout: 10000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const mediaTab = page.locator(selectors.browser.mediaTabs.media)
    await expect(mediaTab).toBeVisible()
    
    // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é File -> Open
    // –ò–ª–∏ —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä ?project=test-project.json
    // –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ URL
    
    const projectUrl = `/?project=${encodeURIComponent('public/test-data/test-project.json')}`
    await page.goto(projectUrl)
    await page.waitForLoadState("networkidle")
    
    console.log("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ URL")
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.screenshot({ 
      path: 'test-results/project-load-attempt.png',
      fullPage: true 
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ URL, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
    const mediaItems = page.locator(selectors.media.item)
    const itemCount = await mediaItems.count()
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${itemCount}`)
    
    if (itemCount === 0) {
      console.log("‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
      console.log("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ:")
      console.log("   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä")
      console.log("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
      console.log("   - –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É 'Open Project' –≤ UI")
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      const openProjectButton = page.locator('button:has-text("Open Project")')
      const hasOpenButton = await openProjectButton.count() > 0
      
      if (hasOpenButton) {
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Open Project'")
        await openProjectButton.click()
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
      } else {
        console.log("‚ùå –ö–Ω–æ–ø–∫–∞ 'Open Project' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      }
    } else {
      console.log("‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      expect(itemCount).toBe(5) // –£ –Ω–∞—Å 5 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
      for (const fileName of ["C0666.MP4", "Kate.mp4", "DSC07845.png", "DJI_02_20250402_104352.WAV", "–ø—Ä–æ–≤–æ–¥–∫–∞ –ø–æ—Å–ª–µ –ª–æ–±–±–∏.mp4"]) {
        await expect(page.locator(`text=${fileName}`)).toBeVisible()
        console.log(`‚úÖ –§–∞–π–ª ${fileName} –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è`)
      }
    }
  })

  test("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –º–æ–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞", async ({ page }) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ window –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await page.addInitScript(() => {
      (window as any).loadTestProject = () => {
        // –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        const testProject = {
          media: {
            files: [
              {
                id: "media-1",
                path: "public/test-data/C0666.MP4",
                name: "C0666.MP4",
                type: "video",
                extension: "mp4",
                size: 268715286,
                duration: 8.16,
                width: 3840,
                height: 2160,
                isVideo: true,
                isAudio: false,
                isImage: false,
                isLoadingMetadata: false,
                probeData: {
                  format: {
                    duration: "8.16",
                    size: 268715286,
                    bit_rate: 263446358
                  },
                  streams: [
                    {
                      codec_type: "video",
                      codec_name: "hevc",
                      width: 3840,
                      height: 2160,
                      r_frame_rate: "50/1"
                    },
                    {
                      codec_type: "audio",
                      codec_name: "pcm_s16be",
                      sample_rate: "48000",
                      channels: 2
                    }
                  ]
                }
              },
              {
                id: "media-2",
                path: "public/test-data/Kate.mp4",
                name: "Kate.mp4",
                type: "video",
                extension: "mp4",
                size: 74604623,
                duration: 7.679,
                width: 3840,
                height: 2160,
                isVideo: true,
                isAudio: false,
                isImage: false,
                isLoadingMetadata: false
              },
              {
                id: "media-3",
                path: "public/test-data/DSC07845.png",
                name: "DSC07845.png",
                type: "image",
                extension: "png",
                size: 6020511,
                width: 4240,
                height: 2832,
                isVideo: false,
                isAudio: false,
                isImage: true,
                isLoadingMetadata: false
              }
            ]
          }
        };
        
        // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        window.dispatchEvent(new CustomEvent('project-loaded', { detail: testProject }));
        
        // –ò–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        if ((window as any).__TIMELINE_STUDIO_STATE__) {
          (window as any).__TIMELINE_STUDIO_STATE__.media = testProject.media;
        }
      };
    });
    
    await page.goto("/")
    await page.waitForLoadState("networkidle")
    
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    await page.evaluate(() => {
      (window as any).loadTestProject();
    });
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    await page.waitForTimeout(1000);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ 
      path: 'test-results/project-mock-load.png',
      fullPage: true 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const mediaItems = page.locator(selectors.media.item);
    const itemCount = await mediaItems.count();
    
    console.log(`üìä –ü–æ—Å–ª–µ –º–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${itemCount}`);
  })

  test("–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", async ({ page }) => {
    await page.goto("/")
    await page.waitForLoadState("networkidle")
    
    // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
    page.on('console', msg => {
      if (msg.type() === 'log') {
        console.log('Browser log:', msg.text())
      }
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log("\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const components = {
      "Media Studio": "div.min-h-screen",
      "Browser Tabs": '[role="tablist"]',
      "Media Tab": selectors.browser.mediaTabs.media,
      "Toolbar": ".flex.items-center.justify-between.py-2",
      "Add Media Button": selectors.browser.toolbar.addMediaButton,
      "Add Folder Button": selectors.browser.toolbar.addFolderButton,
    }
    
    for (const [name, selector] of Object.entries(components)) {
      const exists = await page.locator(selector).count() > 0
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${name}: ${selector}`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤
    const noFilesMessage = await page.locator(selectors.browser.noFilesMessage).count() > 0
    console.log(`\n${noFilesMessage ? '‚úÖ' : '‚ùå'} –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∏ sessionStorage
    const storage = await page.evaluate(() => {
      return {
        localStorage: Object.keys(localStorage),
        sessionStorage: Object.keys(sessionStorage)
      }
    })
    
    console.log("\nüì¶ Storage keys:")
    console.log("localStorage:", storage.localStorage)
    console.log("sessionStorage:", storage.sessionStorage)
    
    // –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ 
      path: 'test-results/app-structure-analysis.png',
      fullPage: true 
    })
  })
})
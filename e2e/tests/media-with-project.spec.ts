import { test, expect } from "../fixtures/test-base"

test.describe("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º", () => {
  test("–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏", async ({ page }) => {
    await page.waitForLoadState("networkidle")
    console.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
    const hasProjectButtons = 
      await page.locator('button').filter({ hasText: /open|load|file|–æ—Ç–∫—Ä—ã—Ç—å|—Ñ–∞–π–ª/i }).count() > 0;
    
    if (hasProjectButtons) {
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º")
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω—é File
      const fileMenu = page.locator('button').filter({ hasText: /file|—Ñ–∞–π–ª/i }).first();
      if (await fileMenu.isVisible()) {
        await fileMenu.click();
        await page.waitForTimeout(200);
        
        // –ò—â–µ–º –ø—É–Ω–∫—Ç Open Project
        const openOption = page.locator('[role="menuitem"]').filter({ hasText: /open|–æ—Ç–∫—Ä—ã—Ç—å/i }).first();
        if (await openOption.isVisible()) {
          console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é Open Project");
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
          await page.keyboard.press('Escape');
        }
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Ctrl+O –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    await page.keyboard.press('Control+o');
    await page.waitForTimeout(500);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    const hasDialog = 
      await page.locator('[role="dialog"], [class*="dialog"], [class*="modal"]').count() > 0;
    
    if (hasDialog) {
      console.log("‚úÖ –î–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—è–≤–∏–ª—Å—è");
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      await page.keyboard.press('Escape');
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É Media
    const mediaTab = page.locator('[role="tab"]:has-text("Media")').first();
    await mediaTab.click();
    await page.waitForTimeout(500);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hasMediaItems = 
      await page.locator('[class*="media"][class*="item"], img[src], video').count() > 0;
    
    console.log(`üìä –ú–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç—ã: ${hasMediaItems ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ 
      path: 'test-results/project-load-state.png',
      fullPage: true 
    });
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
    expect(true).toBeTruthy();
  })

  test("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –º–æ–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞", async ({ page }) => {
    await page.waitForLoadState("networkidle")
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É Media
    const mediaTab = page.locator('[role="tab"]:has-text("Media")').first();
    await mediaTab.click();
    await page.waitForTimeout(500);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
    await page.evaluate(() => {
      const testProject = {
        media: {
          files: [
            {
              id: "media-1",
              path: "test-video.mp4",
              name: "test-video.mp4",
              type: "video",
              isVideo: true,
              duration: 8.16,
              width: 1920,
              height: 1080
            },
            {
              id: "media-2",
              path: "test-image.jpg",
              name: "test-image.jpg",
              type: "image",
              isImage: true,
              width: 1920,
              height: 1080
            }
          ]
        }
      };
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
      window.dispatchEvent(new CustomEvent('project-loaded', { detail: testProject }));
      window.dispatchEvent(new CustomEvent('media-files-loaded', { detail: testProject.media.files }));
    });
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    await page.waitForTimeout(1000);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ 
      path: 'test-results/project-mock-load.png',
      fullPage: true 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const hasMediaItems = 
      await page.locator('[class*="media"][class*="item"], img[src], video').count() > 0;
    
    console.log(`üìä –ü–æ—Å–ª–µ –º–æ–∫–∞ –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç—ã: ${hasMediaItems ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
    expect(true).toBeTruthy();
  })

  test("–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", async ({ page }) => {
    await page.waitForLoadState("networkidle")
    
    // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
    page.on('console', msg => {
      if (msg.type() === 'log') {
        console.log('Browser log:', msg.text())
      }
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log("\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const hasMediaStudio = await page.locator('div.min-h-screen, main').count() > 0;
    const hasBrowserTabs = await page.locator('[role="tablist"]').count() > 0;
    const hasMediaTab = await page.locator('[role="tab"]:has-text("Media")').count() > 0;
    const hasToolbar = await page.locator('[class*="toolbar"], .flex.items-center').count() > 0;
    const hasImportButton = await page.locator('button').filter({ hasText: /import|add|upload/i }).count() > 0;
    
    console.log(`${hasMediaStudio ? '‚úÖ' : '‚ùå'} Media Studio –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä`);
    console.log(`${hasBrowserTabs ? '‚úÖ' : '‚ùå'} Browser –≤–∫–ª–∞–¥–∫–∏`);
    console.log(`${hasMediaTab ? '‚úÖ' : '‚ùå'} Media –≤–∫–ª–∞–¥–∫–∞`);
    console.log(`${hasToolbar ? '‚úÖ' : '‚ùå'} Toolbar`);
    console.log(`${hasImportButton ? '‚úÖ' : '‚ùå'} –ö–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤
    const noFilesMessage = 
      await page.locator('text=/no files|no media|empty|–ø—É—Å—Ç–æ/i').count() > 0 ||
      await page.locator('[class*="empty"], [class*="placeholder"]').count() > 0;
    console.log(`\n${noFilesMessage ? '‚úÖ' : '‚ùå'} –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∏ sessionStorage
    const storage = await page.evaluate(() => {
      return {
        localStorage: Object.keys(localStorage).slice(0, 5),
        sessionStorage: Object.keys(sessionStorage).slice(0, 5)
      }
    })
    
    console.log("\nüì¶ Storage keys (–ø–µ—Ä–≤—ã–µ 5):")
    console.log("localStorage:", storage.localStorage)
    console.log("sessionStorage:", storage.sessionStorage)
    
    // –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ 
      path: 'test-results/app-structure-analysis.png',
      fullPage: true 
    })
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    expect(hasMediaStudio || hasBrowserTabs).toBeTruthy();
  })
})
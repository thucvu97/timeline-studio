# Runs all checks: JS/TS linting and Rust linting

name: Check All

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  check-js:
    name: Check JavaScript/TypeScript
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Disable git core.autocrlf on Windows
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false

      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: "npm"

      - name: Install dependencies on Unix
        if: runner.os != 'Windows'
        run: |
          npm config set fetch-timeout 300000
          npm config set fetch-retries 5
          npm ci --prefer-offline --no-audit --no-fund

      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/windows-npm-install.ps1

      - name: Run lint step on Unix
        if: runner.os != 'Windows'
        run: npm run lint

      - name: Run lint step on Windows
        if: runner.os == 'Windows'
        run: npm run lint:windows

      - name: Check import order on Unix
        if: runner.os != 'Windows'
        run: npm run format:imports

      # Temporarily disabled due to Windows performance issues
      # - name: Check import order on Windows
      #   if: runner.os == 'Windows'
      #   run: npm run format:imports:windows

  check-rust:
    name: Check Rust
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Disable git core.autocrlf on Windows
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false

      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt install libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev ffmpeg libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev pkg-config
          
      - name: Setup FFmpeg environment
        run: |
          echo "=== FFmpeg Header Location Fix ==="
          
          # Check if headers are in expected location
          if [ ! -f "/usr/include/libswscale/swscale.h" ]; then
            echo "Headers not found in /usr/include, searching..."
            
            # Find actual location
            SWSCALE_PATHS=$(find /usr -name "swscale.h" 2>/dev/null)
            echo "Found swscale.h at: $SWSCALE_PATHS"
            
            # Find main header location
            MAIN_SWSCALE=$(echo "$SWSCALE_PATHS" | grep "libswscale/swscale.h" | head -1)
            
            if [ -n "$MAIN_SWSCALE" ]; then
              BASE_DIR=$(dirname $(dirname "$MAIN_SWSCALE"))
              echo "Found FFmpeg headers in: $BASE_DIR"
              
              # Create symlinks
              FFMPEG_LIBS=("libavcodec" "libavformat" "libavutil" "libswscale" "libavfilter" "libavdevice" "libswresample")
              for lib in "${FFMPEG_LIBS[@]}"; do
                if [ -d "$BASE_DIR/$lib" ] && [ ! -L "/usr/include/$lib" ]; then
                  sudo ln -sfn "$BASE_DIR/$lib" "/usr/include/$lib"
                  echo "âœ… Created symlink: /usr/include/$lib -> $BASE_DIR/$lib"
                fi
              done
            fi
          fi
          
          # Set PKG_CONFIG_PATH
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV

      - name: Create empty 'dist' directory
        run: mkdir dist

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: "npm"

      - name: Install dependencies from lockfile
        run: |
          npm config set fetch-timeout 300000
          npm config set fetch-retries 5
          npm ci --prefer-offline --no-audit --no-fund

      - name: Run rustfmt check
        run: npm run format:rust:check

      - name: Run clippy check and deny warnings
        run: npm run lint:rust

  check-tests:
    name: Run Tests
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Disable git core.autocrlf on Windows
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false

      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: "npm"

      - name: Install dependencies
        run: |
          rm -rf node_modules
          npm install

      - name: Run tests
        run: npm test

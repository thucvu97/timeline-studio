name: Test and Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call:

jobs:
  frontend-test-coverage:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run tests with coverage
        run: bun run test:coverage
        env:
          CI: true
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test-results/junit.xml
          flags: frontend
          name: frontend-tests
          fail_ci_if_error: false

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          slug: chatman-media/timeline-studio

  rust-test-coverage:
    name: Rust Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            pkg-config \
            build-essential

      - name: Install ONNX Runtime
        run: |
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz
          tar -xzf onnxruntime-linux-x64-1.22.0.tgz
          sudo cp onnxruntime-linux-x64-1.22.0/lib/*.so* /usr/local/lib/
          sudo ldconfig
          echo "ORT_DYLIB_PATH=/usr/local/lib/libonnxruntime.so" >> $GITHUB_ENV

      - name: Install cargo-llvm-cov
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov --locked
          fi

      - name: Create dist directory
        run: mkdir -p dist

      - name: Run Rust tests with coverage
        run: |
          cd src-tauri
          cargo llvm-cov --lcov --output-path coverage.info
        continue-on-error: true

      - name: Check test results
        run: |
          cd src-tauri
          if [ -f coverage.info ]; then
            echo "✅ Coverage report generated successfully"
          else
            echo "❌ Coverage report not generated"
            exit 1
          fi

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./src-tauri/coverage.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false
          slug: chatman-media/timeline-studio

  e2e-tests:
    name: E2E Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            pkg-config \
            build-essential \
            xvfb

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ffmpeg

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Install pkg-config first
          choco install pkgconfiglite -y
          
          # Install vcpkg for FFmpeg
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg integrate install
          C:\vcpkg\vcpkg install ffmpeg:x64-windows
          
          # Set environment variables for GitHub Actions
          echo "VCPKG_ROOT=C:\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Also set for current session
          $env:VCPKG_ROOT = "C:\vcpkg"
          $env:PKG_CONFIG_PATH = "C:\vcpkg\installed\x64-windows\lib\pkgconfig"
          $env:PATH = "C:\vcpkg\installed\x64-windows\bin;$env:PATH"

      - name: Install dependencies
        run: bun install

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium

      - name: Build application
        run: |
          bun run build
          cd src-tauri
          cargo build --release

      - name: Run E2E tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: xvfb-run -a bun run test:e2e

      - name: Run E2E tests (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: bun run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.os }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Upload E2E screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots-${{ matrix.os }}
          path: |
            tests/e2e/screenshots/
            tests/e2e/videos/
          retention-days: 7
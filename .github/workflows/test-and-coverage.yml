name: Test and Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call:

jobs:
  frontend-test-coverage:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run tests with coverage
        run: bun run test:coverage
        env:
          CI: true
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test-results/junit.xml
          flags: frontend
          name: frontend-tests
          fail_ci_if_error: false

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          slug: chatman-media/timeline-studio

  rust-test-coverage:
    name: Rust Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            pkg-config \
            build-essential \
            clang \
            llvm-dev \
            libclang-dev

      - name: Verify FFmpeg headers
        run: |
          echo "=== Checking FFmpeg headers ==="
          find /usr/include -name "swscale.h" -type f 2>/dev/null || echo "swscale.h not found in /usr/include"
          find /usr/include -name "libswscale" -type d 2>/dev/null || echo "libswscale directory not found"
          ls -la /usr/include/libav* 2>/dev/null || echo "No libav* directories found"
          
          echo "=== Installing additional FFmpeg dev packages ==="
          sudo apt-get install -y \
            libavcodec-extra \
            libavformat-extra \
            libavfilter-extra \
            libavdevice-extra || echo "Extra packages not available"
          
          echo "=== Final header check ==="
          if [ ! -f "/usr/include/libswscale/swscale.h" ]; then
            echo "swscale.h still not found, searching system..."
            find /usr -name "swscale.h" -type f 2>/dev/null || echo "swscale.h not found anywhere"
            
            echo "Available libswscale packages:"
            apt-cache search libswscale
            
            echo "Trying to install all libswscale packages..."
            sudo apt-get install -y $(apt-cache search libswscale | grep -E '^libswscale[0-9]+-dev' | cut -d' ' -f1) || echo "Failed to install additional packages"
          else
            echo "✅ swscale.h found at /usr/include/libswscale/swscale.h"
          fi

      - name: Set FFmpeg environment variables
        run: |
          echo "=== Setting FFmpeg environment variables ==="
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "FFMPEG_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/usr/include" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=/usr/include" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/include" >> $GITHUB_ENV
          
          echo "=== Final verification ==="
          pkg-config --exists --print-errors libavcodec libavformat libavutil libswscale || echo "pkg-config verification failed"
          pkg-config --cflags libswscale || echo "pkg-config cflags failed"
          pkg-config --libs libswscale || echo "pkg-config libs failed"

      - name: Install ONNX Runtime
        run: |
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz
          tar -xzf onnxruntime-linux-x64-1.22.0.tgz
          sudo cp onnxruntime-linux-x64-1.22.0/lib/*.so* /usr/local/lib/
          sudo ldconfig
          echo "ORT_DYLIB_PATH=/usr/local/lib/libonnxruntime.so" >> $GITHUB_ENV

      - name: Install cargo-llvm-cov
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov --locked
          fi

      - name: Create dist directory
        run: mkdir -p dist

      - name: Run Rust tests with coverage
        run: |
          cd src-tauri
          # Set additional environment variables for Rust build
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig"
          export BINDGEN_EXTRA_CLANG_ARGS="-I/usr/include"
          # Try to find LLVM path dynamically
          LLVM_PATHS=(
            "/usr/lib/llvm-18/lib"
            "/usr/lib/llvm-17/lib" 
            "/usr/lib/llvm-16/lib"
            "/usr/lib/llvm-15/lib"
            "/usr/lib/llvm-14/lib"
            "/usr/lib/llvm-13/lib"
            "/usr/lib/x86_64-linux-gnu"
          )
          
          for path in "${LLVM_PATHS[@]}"; do
            if [ -d "$path" ] && [ -f "$path/libclang.so" -o -f "$path/libclang.so.1" ]; then
              export LIBCLANG_PATH="$path"
              echo "✅ Found LIBCLANG_PATH: $path"
              break
            fi
          done
          
          # Debug FFmpeg detection
          echo "=== Debug FFmpeg detection ==="
          pkg-config --exists libswscale && echo "✅ pkg-config can find libswscale" || echo "❌ pkg-config cannot find libswscale"
          ls -la /usr/include/libswscale/ || echo "libswscale headers not found"
          
          cargo llvm-cov --lcov --output-path coverage.info
        continue-on-error: true

      - name: Check test results
        run: |
          cd src-tauri
          if [ -f coverage.info ]; then
            echo "✅ Coverage report generated successfully"
          else
            echo "❌ Coverage report not generated"
            exit 1
          fi

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./src-tauri/coverage.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false
          slug: chatman-media/timeline-studio


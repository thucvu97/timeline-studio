name: Test and Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call:

jobs:
  frontend-test-coverage:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run tests with coverage
        run: bun run test:coverage
        env:
          CI: true
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test-results/junit.xml
          flags: frontend
          name: frontend-tests
          fail_ci_if_error: false

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          slug: chatman-media/timeline-studio

  rust-test-coverage:
    name: Rust Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          
          # Install base dependencies first
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            pkg-config \
            build-essential \
            clang \
            llvm-dev \
            libclang-dev \
            wget \
            yasm \
            nasm

      - name: Install FFmpeg from universe repository
        run: |
          # Enable universe repository explicitly
          sudo add-apt-repository universe -y
          sudo apt-get update
          
          # Try installing FFmpeg with all dev packages
          sudo apt-get install -y \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            libpostproc-dev
            
          # If that fails, try from PPA
          if [ ! -f "/usr/include/libswscale/swscale.h" ]; then
            echo "Standard packages failed, trying PPA..."
            sudo add-apt-repository ppa:savoury1/ffmpeg4 -y
            sudo apt-get update
            sudo apt-get install -y \
              ffmpeg \
              libavcodec-dev \
              libavformat-dev \
              libavutil-dev \
              libavfilter-dev \
              libavdevice-dev \
              libswscale-dev \
              libswresample-dev \
              libpostproc-dev
          fi

      - name: Verify FFmpeg headers or build from source
        run: |
          echo "=== Checking FFmpeg headers ==="
          find /usr/include -name "swscale.h" -type f 2>/dev/null || echo "swscale.h not found in /usr/include"
          find /usr/include -name "libswscale" -type d 2>/dev/null || echo "libswscale directory not found"
          ls -la /usr/include/libav* 2>/dev/null || echo "No libav* directories found"
          
          if [ ! -f "/usr/include/libswscale/swscale.h" ]; then
            echo "=== Headers not found, building FFmpeg from source ==="
            cd /tmp
            
            # Download FFmpeg source
            wget -q https://ffmpeg.org/releases/ffmpeg-6.1.tar.xz
            tar -xf ffmpeg-6.1.tar.xz
            cd ffmpeg-6.1
            
            # Configure with minimal features for faster build
            ./configure \
              --prefix=/usr/local \
              --enable-shared \
              --enable-static \
              --disable-doc \
              --disable-programs \
              --disable-avdevice \
              --disable-avfilter \
              --disable-postproc \
              --disable-network \
              --disable-protocols \
              --disable-filters \
              --disable-encoders \
              --disable-muxers \
              --enable-decoder=h264 \
              --enable-decoder=hevc \
              --enable-decoder=av1 \
              --enable-decoder=vp9 \
              --enable-decoder=vp8
            
            # Build and install
            make -j$(nproc)
            sudo make install
            sudo ldconfig
            
            # Update pkg-config path
            echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
            echo "FFMPEG_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
            echo "FFMPEG_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          else
            echo "✅ swscale.h found at /usr/include/libswscale/swscale.h"
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
            echo "FFMPEG_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
            echo "FFMPEG_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          fi

      - name: Final FFmpeg verification and environment setup
        run: |
          echo "=== Setting additional environment variables ==="
          echo "C_INCLUDE_PATH=${FFMPEG_INCLUDE_DIR}" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=${FFMPEG_INCLUDE_DIR}" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I${FFMPEG_INCLUDE_DIR}" >> $GITHUB_ENV
          
          echo "=== Final verification ==="
          export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}"
          
          # Check if pkg-config can find FFmpeg libraries
          echo "Testing pkg-config for FFmpeg libraries:"
          pkg-config --exists libavcodec && echo "✅ libavcodec found" || echo "❌ libavcodec not found"
          pkg-config --exists libavformat && echo "✅ libavformat found" || echo "❌ libavformat not found" 
          pkg-config --exists libavutil && echo "✅ libavutil found" || echo "❌ libavutil not found"
          pkg-config --exists libswscale && echo "✅ libswscale found" || echo "❌ libswscale not found"
          pkg-config --exists libswresample && echo "✅ libswresample found" || echo "❌ libswresample not found"
          
          # Show paths for debugging
          echo "Include paths:"
          pkg-config --cflags libswscale || echo "No cflags for libswscale"
          echo "Library paths:"
          pkg-config --libs libswscale || echo "No libs for libswscale"
          
          # Final header check
          if [ -f "/usr/include/libswscale/swscale.h" ]; then
            echo "✅ Found swscale.h at /usr/include/libswscale/swscale.h"
          elif [ -f "/usr/local/include/libswscale/swscale.h" ]; then
            echo "✅ Found swscale.h at /usr/local/include/libswscale/swscale.h"
          else
            echo "❌ swscale.h still not found!"
            find /usr -name "swscale.h" -type f 2>/dev/null || echo "No swscale.h files found"
          fi

      - name: Install ONNX Runtime
        run: |
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz
          tar -xzf onnxruntime-linux-x64-1.22.0.tgz
          sudo cp onnxruntime-linux-x64-1.22.0/lib/*.so* /usr/local/lib/
          sudo ldconfig
          echo "ORT_DYLIB_PATH=/usr/local/lib/libonnxruntime.so" >> $GITHUB_ENV

      - name: Install cargo-llvm-cov
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov --locked
          fi

      - name: Create dist directory
        run: mkdir -p dist

      - name: Run Rust tests with coverage
        run: |
          cd src-tauri
          
          # Set all environment variables for Rust build
          export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}"
          export FFMPEG_INCLUDE_DIR="${FFMPEG_INCLUDE_DIR}"
          export FFMPEG_LIB_DIR="${FFMPEG_LIB_DIR}"
          export C_INCLUDE_PATH="${C_INCLUDE_PATH}"
          export CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH}"
          export BINDGEN_EXTRA_CLANG_ARGS="${BINDGEN_EXTRA_CLANG_ARGS}"
          
          # Try to find LLVM path dynamically
          LLVM_PATHS=(
            "/usr/lib/llvm-18/lib"
            "/usr/lib/llvm-17/lib" 
            "/usr/lib/llvm-16/lib"
            "/usr/lib/llvm-15/lib"
            "/usr/lib/llvm-14/lib"
            "/usr/lib/llvm-13/lib"
            "/usr/lib/x86_64-linux-gnu"
          )
          
          for path in "${LLVM_PATHS[@]}"; do
            if [ -d "$path" ] && [ -f "$path/libclang.so" -o -f "$path/libclang.so.1" ]; then
              export LIBCLANG_PATH="$path"
              echo "✅ Found LIBCLANG_PATH: $path"
              break
            fi
          done
          
          # Debug FFmpeg detection before building
          echo "=== Final debug before Rust build ==="
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "FFMPEG_INCLUDE_DIR: $FFMPEG_INCLUDE_DIR"
          echo "BINDGEN_EXTRA_CLANG_ARGS: $BINDGEN_EXTRA_CLANG_ARGS"
          echo "LIBCLANG_PATH: $LIBCLANG_PATH"
          
          # Test that all required libraries can be found
          pkg-config --exists libswscale && echo "✅ libswscale detected" || echo "❌ libswscale NOT detected"
          
          # Check if the critical header file exists
          if [ -f "${FFMPEG_INCLUDE_DIR}/libswscale/swscale.h" ]; then
            echo "✅ swscale.h found at ${FFMPEG_INCLUDE_DIR}/libswscale/swscale.h"
          else
            echo "❌ swscale.h NOT found at ${FFMPEG_INCLUDE_DIR}/libswscale/swscale.h"
            echo "Searching for swscale.h..."
            find /usr -name "swscale.h" -type f 2>/dev/null || echo "No swscale.h found anywhere"
          fi
          
          # Run the actual build
          cargo llvm-cov --lcov --output-path coverage.info
        continue-on-error: true

      - name: Check test results
        run: |
          cd src-tauri
          if [ -f coverage.info ]; then
            echo "✅ Coverage report generated successfully"
          else
            echo "❌ Coverage report not generated"
            exit 1
          fi

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./src-tauri/coverage.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false
          slug: chatman-media/timeline-studio


name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        default: ''
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        default: true
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ github.event.inputs.version }}

    steps:
      - name: Create or Get Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = `v${{ github.event.inputs.version }}`;
            const releaseName = `Timeline Studio v${{ github.event.inputs.version }}`;
            const releaseBody = `Timeline Studio v${{ github.event.inputs.version }}

            ## –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏

            üîÑ –§–∞–π–ª—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è... –°—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏.

            ## –ò–∑–º–µ–Ω–µ–Ω–∏—è

            - –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            - –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`;

            try {
              // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ª–∏–∑
              const existingRelease = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });

              console.log(`Release ${tag} already exists, using existing release`);
              core.setOutput('id', existingRelease.data.id);
              core.setOutput('upload_url', existingRelease.data.upload_url);
              return existingRelease.data;
            } catch (error) {
              if (error.status === 404) {
                // –†–µ–ª–∏–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                console.log(`Creating new release ${tag}`);
                const newRelease = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: releaseName,
                  body: releaseBody,
                  draft: false,
                  prerelease: ${{ github.event.inputs.prerelease }}
                });

                core.setOutput('id', newRelease.data.id);
                core.setOutput('upload_url', newRelease.data.upload_url);
                return newRelease.data;
              } else {
                throw error;
              }
            }

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            arch: [x64, aarch64]
          - platform: ubuntu-latest
            arch: [x64]
          - platform: windows-latest
            arch: [x64]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Ubuntu
          UBUNTU_VERSION=$(lsb_release -rs)
          echo "Ubuntu version: $UBUNTU_VERSION"

          if [[ "$UBUNTU_VERSION" == "24.04" ]]; then
            # Ubuntu 24.04 (Noble)
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf
          else
            # Ubuntu 22.04 (Jammy) –∏ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          fi

      - name: Install frontend dependencies
        run: |
          # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .npmrc, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ npm
          echo "engine-strict=false" > .npmrc
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          npm install
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          npm install --save-dev @testing-library/dom @testing-library/react @testing-library/user-event @testing-library/jest-dom

      - name: Ensure Tauri CLI binaries
        run: npx tauri --help

      - name: Run tests
        run: npm run test

      # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ tauri.conf.json –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
      - name: Fix product name (Unix)
        if: runner.os != 'Windows'
        run: |
          # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã –≤ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # macOS —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –æ–ø—Ü–∏–∏ -i
            sed -i '' 's/"productName": "Timeline Studio"/"productName": "timeline-studio"/g' src-tauri/tauri.conf.json
          else
            # Linux
            sed -i 's/"productName": "Timeline Studio"/"productName": "timeline-studio"/g' src-tauri/tauri.conf.json
          fi

      - name: Fix product name (Windows)
        if: runner.os == 'Windows'
        run: |
          # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã –≤ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
          (Get-Content src-tauri/tauri.conf.json) -replace '"productName": "Timeline Studio"', '"productName": "timeline-studio"' | Set-Content src-tauri/tauri.conf.json

      - name: Install macOS targets
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build the app (macOS universal)
        if: matrix.platform == 'macos-latest'
        uses: tauri-apps/tauri-action@v0.5.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_CLI_PACKAGE_MANAGER: "npm"
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: v${{ needs.create-release.outputs.version }}
          releaseName: "Timeline Studio v${{ needs.create-release.outputs.version }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          args: --target universal-apple-darwin --ci
          includeDebug: false
          includeRelease: true
          includeUpdaterJson: true
          tauriScript: "npm run tauri"

      - name: Build the app (Windows/Linux)
        if: matrix.platform != 'macos-latest'
        uses: tauri-apps/tauri-action@v0.5.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_CLI_PACKAGE_MANAGER: "npm"
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: v${{ needs.create-release.outputs.version }}
          releaseName: "Timeline Studio v${{ needs.create-release.outputs.version }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          includeDebug: false
          includeRelease: true
          includeUpdaterJson: true
          tauriScript: "npm run tauri"
          args: --ci

  update-release-description:
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest
    steps:
      - name: Update Release Description
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = `v${{ needs.create-release.outputs.version }}`;
            const releaseBody = `Timeline Studio v${{ needs.create-release.outputs.version }}

            ## –ó–∞–≥—Ä—É–∑–∫–∏

            - [Windows (x64)](https://github.com/chatman-media/timeline-studio/releases/download/v${{ needs.create-release.outputs.version }}/timeline-studio-${{ needs.create-release.outputs.version }}-windows-x64.msi)
            - [macOS (Intel)](https://github.com/chatman-media/timeline-studio/releases/download/v${{ needs.create-release.outputs.version }}/timeline-studio-${{ needs.create-release.outputs.version }}-macos-x64.dmg)
            - [macOS (Apple Silicon)](https://github.com/chatman-media/timeline-studio/releases/download/v${{ needs.create-release.outputs.version }}/timeline-studio-${{ needs.create-release.outputs.version }}-macos-aarch64.dmg)
            - [Linux (AppImage)](https://github.com/chatman-media/timeline-studio/releases/download/v${{ needs.create-release.outputs.version }}/timeline-studio-${{ needs.create-release.outputs.version }}-linux-x86_64.AppImage)
            - [Linux (Debian/Ubuntu)](https://github.com/chatman-media/timeline-studio/releases/download/v${{ needs.create-release.outputs.version }}/timeline-studio-${{ needs.create-release.outputs.version }}-linux-amd64.deb)

            ## –ò–∑–º–µ–Ω–µ–Ω–∏—è

            - –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            - –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              body: releaseBody
            });

  update-promo-page:
    needs: [create-release, build-tauri, update-release-description]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd promo
          npm install

      - name: Update download links
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"

          # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç DownloadButton –≤ App.tsx –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤–º–µ—Å—Ç–æ latest
          sed -i "s|https://github.com/chatman-media/timeline-studio/releases/latest/download/|https://github.com/chatman-media/timeline-studio/releases/download/v${VERSION}/|g" promo/src/App.tsx

          # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
          sed -i "s|timeline-studio-windows-x64.msi|timeline-studio-${VERSION}-windows-x64.msi|g" promo/src/App.tsx
          sed -i "s|timeline-studio-macos-x64.dmg|timeline-studio-${VERSION}-macos-x64.dmg|g" promo/src/App.tsx
          sed -i "s|timeline-studio-linux-x86_64.AppImage|timeline-studio-${VERSION}-linux-x86_64.AppImage|g" promo/src/App.tsx

          # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
          sed -i "s|<span className=\"font-semibold\">–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: </span>|<span className=\"font-semibold\">–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: v${VERSION} </span>|g" promo/src/App.tsx

      - name: Build promo page
        run: |
          cd promo
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–±–æ—Ä–∫—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
          npm run build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: promo/dist
          branch: gh-pages
          clean: false
          token: ${{ secrets.GITHUB_TOKEN }}

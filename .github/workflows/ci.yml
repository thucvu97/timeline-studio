name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Run linting
        run: bun run lint
        
      - name: Run tests
        run: bun run test
        
      - name: Build frontend
        run: bun run build

  test-backend:
    name: Test Backend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      # Linux dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            pkg-config \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
            
      # macOS dependencies  
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ffmpeg onnxruntime
          
      # Windows dependencies - optimized approach
      - name: Setup Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Install chocolatey packages
          choco install pkgconfiglite -y
          
          # Download and setup prebuilt FFmpeg (much faster than vcpkg)
          $ffmpegUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z"
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile "ffmpeg.7z"
          7z x ffmpeg.7z -o"C:\"
          $ffmpegDir = Get-ChildItem "C:\ffmpeg-*" | Select-Object -First 1
          Rename-Item $ffmpegDir.FullName "C:\ffmpeg"
          
          # Set environment variables
          echo "FFMPEG_DIR=C:\ffmpeg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\ffmpeg\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "C:\ffmpeg\bin" >> $env:GITHUB_PATH
          
      # Alternative Windows setup using vcpkg (cached)
      - name: Cache vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\vcpkg\buildtrees
          key: ${{ runner.os }}-vcpkg-ffmpeg-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-ffmpeg-
            ${{ runner.os }}-vcpkg-
            
      - name: Setup vcpkg FFmpeg (Windows fallback)
        if: runner.os == 'Windows' && steps.cache-vcpkg.outputs.cache-hit != 'true'
        timeout-minutes: 30
        shell: powershell
        run: |
          # Only run if prebuilt FFmpeg setup failed
          if (-not (Test-Path "C:\ffmpeg\bin\ffmpeg.exe")) {
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
            cd C:\vcpkg
            .\bootstrap-vcpkg.bat
            .\vcpkg integrate install
            .\vcpkg install ffmpeg:x64-windows
            echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
            echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows\lib\pkgconfig" >> $env:GITHUB_ENV
          }
          
      - name: Run backend tests
        working-directory: src-tauri
        run: |
          cargo test --lib -- --test-threads=1
          
      - name: Run clippy
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Check formatting
        working-directory: src-tauri
        run: cargo fmt -- --check

  build:
    name: Build Application
    needs: [test-frontend, test-backend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/bun.lockb') }}
          
      # Repeat dependency installation steps from test job
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev
          
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install ffmpeg onnxruntime
        
      - name: Setup Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install pkgconfiglite -y
          $ffmpegUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z"
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile "ffmpeg.7z"
          7z x ffmpeg.7z -o"C:\"
          $ffmpegDir = Get-ChildItem "C:\ffmpeg-*" | Select-Object -First 1
          Rename-Item $ffmpegDir.FullName "C:\ffmpeg"
          echo "FFMPEG_DIR=C:\ffmpeg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\ffmpeg\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "C:\ffmpeg\bin" >> $env:GITHUB_PATH
          
      - name: Install frontend dependencies
        run: bun install
        
      - name: Build frontend
        run: bun run build
        
      - name: Build Tauri application
        working-directory: src-tauri
        run: cargo tauri build
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timeline-studio-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/**/.*
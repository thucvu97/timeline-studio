name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Run linting
        run: bun run lint
        
      - name: Run tests
        run: bun run test
        
      - name: Build frontend
        run: bun run build

  test-backend:
    name: Test Backend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            node_modules
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-
            
      # Linux dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            pkg-config \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev
            
      - name: Setup FFmpeg for Linux
        if: runner.os == 'Linux'
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          
          # Set FFmpeg environment variables explicitly
          echo "FFMPEG_DIR=/usr" >> $GITHUB_ENV
          echo "FFMPEG_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "FFMPEG_AVCODEC_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVFORMAT_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVUTIL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVDEVICE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVFILTER_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_SWSCALE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_SWRESAMPLE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          
          # Run FFmpeg setup script
          if ! bash scripts/setup-ffmpeg-linux.sh; then
              echo "Main setup failed, trying pkg-config approach..."
              bash scripts/setup-ffmpeg-pkg-config.sh
          fi
            
      - name: Verify FFmpeg installation
        if: runner.os == 'Linux'
        run: |
          echo "Verifying FFmpeg installation..."
          pkg-config --version
          echo "Current PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "Looking for libavutil.pc..."
          find /usr -name "libavutil.pc" 2>/dev/null | head -20
          echo "Contents of pkgconfig directories:"
          ls -la /usr/lib/x86_64-linux-gnu/pkgconfig/ | grep -i ffmpeg || echo "No ffmpeg in x86_64-linux-gnu"
          ls -la /usr/lib/pkgconfig/ | grep -i ffmpeg || echo "No ffmpeg in lib/pkgconfig"
          ls -la /usr/share/pkgconfig/ | grep -i ffmpeg || echo "No ffmpeg in share/pkgconfig"
          echo "Looking for libav*.pc files:"
          find /usr -name "libav*.pc" 2>/dev/null | head -20
          echo "Testing pkg-config with libavutil..."
          PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig pkg-config --libs --cflags libavutil || echo "pkg-config failed"
          echo "Trying alternative paths:"
          find /usr/local -name "libavutil.pc" 2>/dev/null | head -10 || echo "Not in /usr/local"
            
      # macOS dependencies  
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ffmpeg onnxruntime
          
      - name: Setup FFmpeg for macOS
        if: runner.os == 'macOS'
        run: |
          # Run FFmpeg setup script
          bash scripts/setup-ffmpeg-macos.sh
          
      - name: Set macOS environment variables
        if: runner.os == 'macOS'
        run: |
          echo "Setting up ONNX Runtime for macOS..."
          # Check which path exists
          if [ -f "/opt/homebrew/lib/libonnxruntime.dylib" ]; then
            echo "Found ONNX Runtime at /opt/homebrew/lib/libonnxruntime.dylib (Apple Silicon)"
            echo "ORT_DYLIB_PATH=/opt/homebrew/lib/libonnxruntime.dylib" >> $GITHUB_ENV
          elif [ -f "/usr/local/lib/libonnxruntime.dylib" ]; then
            echo "Found ONNX Runtime at /usr/local/lib/libonnxruntime.dylib (Intel Mac)"
            echo "ORT_DYLIB_PATH=/usr/local/lib/libonnxruntime.dylib" >> $GITHUB_ENV
          else
            echo "Warning: ONNX Runtime library not found!"
            find /opt/homebrew -name "libonnxruntime*.dylib" 2>/dev/null || echo "Not in /opt/homebrew"
            find /usr/local -name "libonnxruntime*.dylib" 2>/dev/null || echo "Not in /usr/local"
          fi
          
      # Windows dependencies - optimized approach
      - name: Setup Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        timeout-minutes: 15
        run: |
          # Install chocolatey packages
          choco install pkgconfiglite -y --no-progress
          choco install llvm -y --no-progress
          
          # Download and setup prebuilt FFmpeg (much faster than vcpkg)
          try {
            $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip"
            Write-Host "Downloading FFmpeg from GitHub releases..."
            Invoke-WebRequest -Uri $ffmpegUrl -OutFile "ffmpeg.zip" -TimeoutSec 300
            Expand-Archive -Path "ffmpeg.zip" -DestinationPath "C:\" -Force
            $ffmpegExtracted = Get-ChildItem "C:\ffmpeg-*" | Select-Object -First 1
            if ($ffmpegExtracted) {
              Rename-Item $ffmpegExtracted.FullName "C:\ffmpeg" -Force
              Write-Host "✅ FFmpeg setup successful via GitHub releases"
            }
          }
          catch {
            Write-Host "GitHub method failed, trying Gyan.dev..."
            $ffmpegUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z"
            Invoke-WebRequest -Uri $ffmpegUrl -OutFile "ffmpeg.7z" -TimeoutSec 600
            7z x ffmpeg.7z -o"C:\" -y
            $ffmpegDir = Get-ChildItem "C:\ffmpeg-*" | Select-Object -First 1
            if ($ffmpegDir) {
              Rename-Item $ffmpegDir.FullName "C:\ffmpeg" -Force
              Write-Host "✅ FFmpeg setup successful via Gyan.dev"
            }
          }
          
          # Set up comprehensive environment for FFmpeg development
          echo "FFMPEG_DIR=C:\ffmpeg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\ffmpeg\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "C:\ffmpeg\bin" >> $env:GITHUB_PATH
          
          # Configure for ffmpeg-sys-next crate
          echo "FFMPEG_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_LIB_DIR=C:\ffmpeg\lib" >> $env:GITHUB_ENV
          echo "FFMPEG_LINK_TYPE=dynamic" >> $env:GITHUB_ENV
          echo "FFMPEG_NO_PKG_CONFIG=1" >> $env:GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-IC:\ffmpeg\include -IC:/ffmpeg/include" >> $env:GITHUB_ENV
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV
          echo "FFMPEG_PKG_CONFIG_PATH=C:\ffmpeg\lib\pkgconfig" >> $env:GITHUB_ENV
          
          # Additional paths for ffmpeg-sys-next
          echo "FFMPEG_AVCODEC_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVFORMAT_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVUTIL_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVDEVICE_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVFILTER_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_SWSCALE_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_SWRESAMPLE_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          
          # Force Windows paths
          echo "FFMPEG_PKG_CONFIG=C:\ffmpeg\lib\pkgconfig\libavcodec.pc" >> $env:GITHUB_ENV
          echo "CARGO_CFG_TARGET_FAMILY=windows" >> $env:GITHUB_ENV
          
          # Verify critical components
          if (Test-Path "C:\ffmpeg\bin\ffmpeg.exe") {
            Write-Host "✅ FFmpeg executable found"
            if (Test-Path "C:\ffmpeg\include\libavcodec\avcodec.h") {
              Write-Host "✅ FFmpeg development headers found"
              # Check for the specific file that's causing issues
              if (Test-Path "C:\ffmpeg\include\libavcodec\avfft.h") {
                Write-Host "✅ avfft.h found"
              } else {
                Write-Host "⚠️ avfft.h not found - checking alternatives..."
                Get-ChildItem -Path "C:\ffmpeg\include" -Recurse -Filter "avfft.h" | ForEach-Object { Write-Host "Found at: $_" }
              }
            } else {
              Write-Host "❌ FFmpeg headers missing - build will fail"
              Write-Host "Checking what's in include directory:"
              Get-ChildItem -Path "C:\ffmpeg\include" -Recurse | Select-Object -First 20
            }
          } else {
            Write-Host "❌ FFmpeg not found - build will fail"
            exit 1
          }
          
      - name: Setup FFmpeg for Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Run FFmpeg setup script
          .\scripts\setup-ffmpeg-windows.ps1
          
      - name: Install frontend dependencies
        run: bun install
        
      - name: Build frontend
        run: bun run build
          
      - name: Run backend tests (Linux)
        if: runner.os == 'Linux'
        working-directory: src-tauri
        run: |
          cargo test --lib -- --test-threads=1
          
      - name: Run backend tests (macOS)
        if: runner.os == 'macOS'
        working-directory: src-tauri
        run: |
          cargo test --lib -- --test-threads=1
          
      - name: Run backend tests (Windows)
        if: runner.os == 'Windows'
        working-directory: src-tauri
        run: |
          Write-Host "Current environment:"
          Write-Host "FFMPEG_DIR=$env:FFMPEG_DIR"
          Write-Host "FFMPEG_INCLUDE_DIR=$env:FFMPEG_INCLUDE_DIR"
          Write-Host "FFMPEG_LIB_DIR=$env:FFMPEG_LIB_DIR"
          Write-Host "BINDGEN_EXTRA_CLANG_ARGS=$env:BINDGEN_EXTRA_CLANG_ARGS"
          Write-Host ""
          Write-Host "Running tests..."
          cargo test --lib -- --test-threads=1
          
      - name: Run clippy (Linux)
        if: runner.os == 'Linux'
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run clippy (non-Linux)
        if: runner.os != 'Linux'
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Check formatting
        working-directory: src-tauri
        run: cargo fmt -- --check

  build:
    name: Build Application
    needs: [test-frontend, test-backend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/bun.lockb') }}
          
      # Repeat dependency installation steps from test job
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev libglib2.0-dev libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev
          
      - name: Setup FFmpeg for Linux
        if: runner.os == 'Linux'
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          
          # Set FFmpeg environment variables explicitly
          echo "FFMPEG_DIR=/usr" >> $GITHUB_ENV
          echo "FFMPEG_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "FFMPEG_AVCODEC_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVFORMAT_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVUTIL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVDEVICE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVFILTER_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_SWSCALE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_SWRESAMPLE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          
          # Run FFmpeg setup script
          if ! bash scripts/setup-ffmpeg-linux.sh; then
              echo "Main setup failed, trying pkg-config approach..."
              bash scripts/setup-ffmpeg-pkg-config.sh
          fi
          
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install ffmpeg onnxruntime
        
      - name: Setup FFmpeg for macOS
        if: runner.os == 'macOS'
        run: |
          # Run FFmpeg setup script
          bash scripts/setup-ffmpeg-macos.sh
          
      - name: Set macOS environment variables
        if: runner.os == 'macOS'  
        run: |
          echo "Setting up ONNX Runtime for macOS..."
          # Check which path exists
          if [ -f "/opt/homebrew/lib/libonnxruntime.dylib" ]; then
            echo "Found ONNX Runtime at /opt/homebrew/lib/libonnxruntime.dylib (Apple Silicon)"
            echo "ORT_DYLIB_PATH=/opt/homebrew/lib/libonnxruntime.dylib" >> $GITHUB_ENV
          elif [ -f "/usr/local/lib/libonnxruntime.dylib" ]; then
            echo "Found ONNX Runtime at /usr/local/lib/libonnxruntime.dylib (Intel Mac)"
            echo "ORT_DYLIB_PATH=/usr/local/lib/libonnxruntime.dylib" >> $GITHUB_ENV
          else
            echo "Warning: ONNX Runtime library not found!"
            find /opt/homebrew -name "libonnxruntime*.dylib" 2>/dev/null || echo "Not in /opt/homebrew"
            find /usr/local -name "libonnxruntime*.dylib" 2>/dev/null || echo "Not in /usr/local"
          fi
        
      - name: Setup Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        timeout-minutes: 15
        run: |
          choco install pkgconfiglite -y --no-progress
          choco install llvm -y --no-progress
          
          try {
            $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip"
            Invoke-WebRequest -Uri $ffmpegUrl -OutFile "ffmpeg.zip" -TimeoutSec 300
            Expand-Archive -Path "ffmpeg.zip" -DestinationPath "C:\" -Force
            $ffmpegExtracted = Get-ChildItem "C:\ffmpeg-*" | Select-Object -First 1
            if ($ffmpegExtracted) {
              Rename-Item $ffmpegExtracted.FullName "C:\ffmpeg" -Force
            }
          }
          catch {
            $ffmpegUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z"
            Invoke-WebRequest -Uri $ffmpegUrl -OutFile "ffmpeg.7z" -TimeoutSec 600
            7z x ffmpeg.7z -o"C:\" -y
            $ffmpegDir = Get-ChildItem "C:\ffmpeg-*" | Select-Object -First 1
            if ($ffmpegDir) {
              Rename-Item $ffmpegDir.FullName "C:\ffmpeg" -Force
            }
          }
          
          echo "FFMPEG_DIR=C:\ffmpeg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\ffmpeg\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "C:\ffmpeg\bin" >> $env:GITHUB_PATH
          echo "FFMPEG_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_LIB_DIR=C:\ffmpeg\lib" >> $env:GITHUB_ENV
          echo "FFMPEG_LINK_TYPE=dynamic" >> $env:GITHUB_ENV
          echo "FFMPEG_NO_PKG_CONFIG=1" >> $env:GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-IC:\ffmpeg\include -IC:/ffmpeg/include" >> $env:GITHUB_ENV
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV
          echo "FFMPEG_PKG_CONFIG_PATH=C:\ffmpeg\lib\pkgconfig" >> $env:GITHUB_ENV
          
          # Additional paths for ffmpeg-sys-next
          echo "FFMPEG_AVCODEC_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVFORMAT_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVUTIL_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVDEVICE_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_AVFILTER_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_SWSCALE_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          echo "FFMPEG_SWRESAMPLE_INCLUDE_DIR=C:\ffmpeg\include" >> $env:GITHUB_ENV
          
          # Force Windows paths
          echo "FFMPEG_PKG_CONFIG=C:\ffmpeg\lib\pkgconfig\libavcodec.pc" >> $env:GITHUB_ENV
          echo "CARGO_CFG_TARGET_FAMILY=windows" >> $env:GITHUB_ENV
          
      - name: Install frontend dependencies
        run: bun install
        
      - name: Build frontend
        run: bun run build
        
      - name: Build Tauri application (Linux)
        if: runner.os == 'Linux'
        working-directory: src-tauri
        run: cargo tauri build
        
      - name: Build Tauri application (non-Linux)
        if: runner.os != 'Linux'
        working-directory: src-tauri
        run: cargo tauri build
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timeline-studio-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/**/.*
name: Test Coverage

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-coverage:
    name: Test and Upload Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run tests with coverage
        run: bun run test:coverage
        env:
          CI: true
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          CODECOV_STATIC_TOKEN: ${{ secrets.CODECOV_STATIC_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test-results/junit.xml
          flags: frontend
          name: frontend-tests
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage to Codecov (with plugin)
        if: always()
        run: bun run test:coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          CODECOV_STATIC_TOKEN: ${{ secrets.CODECOV_STATIC_TOKEN }}
          CI: true

      - name: Upload coverage reports to Codecov (fallback)
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          verbose: true
          slug: chatman-media/timeline-studio

  test-rust-coverage:
    name: Rust Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo-llvm-cov
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-llvm-cov
          key: ${{ runner.os }}-cargo-llvm-cov-0.5.39

      - name: Install cargo-llvm-cov
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov --locked
          fi

      - name: Install cargo2junit
        run: |
          if ! command -v cargo2junit &> /dev/null; then
            cargo install cargo2junit --locked
          fi

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt install libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev ffmpeg libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev pkg-config
      
      - name: Setup FFmpeg environment and diagnostics
        run: |
          echo "=== FFmpeg Diagnostics ==="
          echo "Installed packages:"
          dpkg -l | grep -E "(ffmpeg|libav|libsw)" | head -10
          
          echo ""
          echo "Searching for FFmpeg headers system-wide..."
          find /usr -name "swscale.h" 2>/dev/null | head -5 || echo "No swscale.h found"
          find /usr -name "avcodec.h" 2>/dev/null | head -5 || echo "No avcodec.h found"
          
          echo ""
          echo "Checking common include directories..."
          ls -la /usr/include/ | grep -E "(libav|libsw|ffmpeg)" || echo "No FFmpeg directories in /usr/include"
          ls -la /usr/include/x86_64-linux-gnu/ | grep -E "(libav|libsw|ffmpeg)" || echo "No FFmpeg directories in /usr/include/x86_64-linux-gnu"
          
          echo ""
          echo "pkg-config status:"
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig"
          pkg-config --exists libswscale && echo "✅ pkg-config finds libswscale" || echo "❌ pkg-config cannot find libswscale"
          pkg-config --cflags libswscale 2>/dev/null || echo "No cflags for libswscale"
          pkg-config --libs libswscale 2>/dev/null || echo "No libs for libswscale"
          
          echo ""
          echo "=== Attempting to fix header locations ==="
          
          # Check if headers are in expected location
          if [ ! -f "/usr/include/libswscale/swscale.h" ]; then
            echo "swscale.h not found in /usr/include, searching for actual location..."
            
            # More comprehensive search
            SWSCALE_PATHS=$(find /usr -name "swscale.h" 2>/dev/null)
            echo "Found swscale.h files at:"
            echo "$SWSCALE_PATHS"
            
            # Try to find the main one in libswscale directory
            MAIN_SWSCALE=$(echo "$SWSCALE_PATHS" | grep "libswscale/swscale.h" | head -1)
            
            if [ -n "$MAIN_SWSCALE" ]; then
              # Extract base directory (parent of libswscale)
              BASE_DIR=$(dirname $(dirname "$MAIN_SWSCALE"))
              echo "Found main FFmpeg headers in: $BASE_DIR"
              
              # Create symlinks to standard location
              echo "Creating symlinks to /usr/include..."
              FFMPEG_LIBS=("libavcodec" "libavformat" "libavutil" "libswscale" "libavfilter" "libavdevice" "libswresample")
              for lib in "${FFMPEG_LIBS[@]}"; do
                if [ -d "$BASE_DIR/$lib" ] && [ ! -L "/usr/include/$lib" ]; then
                  sudo ln -sfn "$BASE_DIR/$lib" "/usr/include/$lib"
                  echo "✅ Created symlink: /usr/include/$lib -> $BASE_DIR/$lib"
                elif [ -L "/usr/include/$lib" ]; then
                  echo "✅ Symlink already exists: /usr/include/$lib"
                else
                  echo "⚠️ Directory not found: $BASE_DIR/$lib"
                fi
              done
              
              # Verify the symlinks worked
              echo ""
              echo "Verification after symlink creation:"
              if [ -f "/usr/include/libswscale/swscale.h" ]; then
                echo "✅ swscale.h now accessible at /usr/include/libswscale/swscale.h"
              else
                echo "❌ swscale.h still not found at /usr/include/libswscale/swscale.h"
              fi
            else
              echo "❌ ERROR: No libswscale/swscale.h found in any location!"
              echo "All swscale.h locations:"
              echo "$SWSCALE_PATHS"
              exit 1
            fi
          else
            echo "✅ swscale.h already found at /usr/include/libswscale/swscale.h"
          fi
          
          # Set environment variables for pkg-config
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          
      - name: Install ONNX Runtime
        run: |
          # Download ONNX Runtime 1.22.0 for Linux x64 (compatible with ort 2.0.0-rc.10)
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz
          tar -xzf onnxruntime-linux-x64-1.22.0.tgz
          # Copy only library files to system path
          sudo cp onnxruntime-linux-x64-1.22.0/lib/*.so* /usr/local/lib/
          # Update library cache
          sudo ldconfig
          # Set environment variable for dynamic loading
          echo "ORT_DYLIB_PATH=/usr/local/lib/libonnxruntime.so" >> $GITHUB_ENV

      - name: Create empty dist directory
        run: mkdir dist

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run Rust tests with coverage
        run: |
          cd src-tauri
          # Run all tests normally first to ensure they pass
          cargo test --lib --bins --tests
          # Generate JUnit report (if cargo2junit is available)
          if command -v cargo2junit &> /dev/null; then
            cargo test --lib --bins --tests --no-fail-fast --message-format json 2>/dev/null | cargo2junit > ../test-results/rust-junit.xml || echo "cargo2junit failed, but tests passed"
          else
            echo "cargo2junit not found, skipping JUnit report generation"
          fi
          cd ..
          # Also run coverage tests
          bun run test:coverage:rust
        env:
          RUSTFLAGS: -Cinstrument-coverage
          LLVM_PROFILE_FILE: timeline-studio-%p-%m.profraw

      - name: Upload Rust test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test-results/rust-junit.xml
          flags: rust
          name: rust-tests
          fail_ci_if_error: false
          verbose: true

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./src-tauri/coverage.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false
          verbose: true
          slug: chatman-media/timeline-studio
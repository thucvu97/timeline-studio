name: Test Coverage

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-coverage:
    name: Test and Upload Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm config set fetch-timeout 300000
          npm config set fetch-retries 5
          npm ci --prefer-offline --no-audit --no-fund

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage to Codecov (with plugin)
        if: always()
        run: npm run test:coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          CI: true

      - name: Upload coverage reports to Codecov (fallback)
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          verbose: true

  test-rust-coverage:
    name: Rust Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt install libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev ffmpeg libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev pkg-config

      - name: Create empty dist directory
        run: mkdir dist

      - name: Run Rust tests with coverage
        run: npm run test:coverage:rust

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./src-tauri/coverage.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          verbose: true
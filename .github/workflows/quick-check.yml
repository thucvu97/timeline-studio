name: Quick Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev
            
      - name: Setup FFmpeg for Linux
        uses: ./.github/actions/setup-ffmpeg-linux
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ubuntu-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install frontend dependencies
        run: bun install
        
      - name: Frontend lint check
        run: bun run lint
        
      - name: Backend format check
        working-directory: src-tauri
        run: cargo fmt -- --check
        
      - name: Create dist directory for tauri context
        run: mkdir -p dist
        
      - name: Verify FFmpeg before clippy
        run: |
          echo "Final verification before clippy check..."
          echo "Environment variables:"
          echo "  FFMPEG_INCLUDE_DIR=$FFMPEG_INCLUDE_DIR"
          echo "  BINDGEN_EXTRA_CLANG_ARGS=$BINDGEN_EXTRA_CLANG_ARGS"
          echo "  PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
          
          echo "Critical files check:"
          [ -f "/usr/include/libswscale/swscale.h" ] && echo "✅ /usr/include/libswscale/swscale.h exists" || echo "❌ /usr/include/libswscale/swscale.h missing"
          [ -f "/usr/include/libavutil/avutil.h" ] && echo "✅ /usr/include/libavutil/avutil.h exists" || echo "❌ /usr/include/libavutil/avutil.h missing"
          
          # Try to find swscale.h if it's missing
          if [ ! -f "/usr/include/libswscale/swscale.h" ]; then
            echo "Searching for swscale.h in system..."
            find /usr -name "swscale.h" 2>/dev/null | head -5
            # Try to create missing symlinks
            SWSCALE_ACTUAL=$(find /usr -name "swscale.h" 2>/dev/null | head -1)
            if [ -n "$SWSCALE_ACTUAL" ]; then
              SWSCALE_DIR=$(dirname "$SWSCALE_ACTUAL")
              echo "Found swscale.h at: $SWSCALE_ACTUAL"
              echo "Directory: $SWSCALE_DIR"
              # Try to create symlink
              sudo mkdir -p /usr/include/libswscale 2>/dev/null || true
              sudo ln -sf "$SWSCALE_ACTUAL" /usr/include/libswscale/swscale.h 2>/dev/null || true
            fi
          fi
          
      - name: Backend clippy check
        working-directory: src-tauri
        run: cargo clippy --lib -- -D warnings
        
      - name: Quick backend test (core modules only)
        working-directory: src-tauri
        run: |
          # Run only critical backend tests to catch major issues quickly
          cargo test --lib language_tauri::tests -- --test-threads=1
          cargo test --lib command_registry::tests -- --test-threads=1
          cargo test --lib core::di::tests -- --test-threads=1
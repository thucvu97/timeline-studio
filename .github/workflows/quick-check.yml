name: Quick Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            pkg-config \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev
            
      - name: Setup FFmpeg for Linux
        run: |
          # Debug FFmpeg installation
          echo "Checking FFmpeg installation..."
          which ffmpeg || echo "ffmpeg not in PATH"
          ffmpeg -version || echo "ffmpeg version check failed"
          pkg-config --version || echo "pkg-config not found"
          
          # Find FFmpeg headers
          echo "Looking for FFmpeg headers..."
          find /usr -name "libavutil" -type d 2>/dev/null | head -10
          find /usr -name "libswscale" -type d 2>/dev/null | head -10
          find /usr -name "avutil.h" 2>/dev/null | head -10
          find /usr -name "swscale.h" 2>/dev/null | head -10
          
          # Set comprehensive PKG_CONFIG_PATH
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          
          # Test pkg-config with FFmpeg
          echo "Testing pkg-config with libavutil..."
          PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" pkg-config --exists libavutil && echo "libavutil found" || echo "libavutil not found"
          PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" pkg-config --exists libswscale && echo "libswscale found" || echo "libswscale not found"
          
          # Set FFmpeg environment variables
          echo "FFMPEG_DIR=/usr" >> $GITHUB_ENV
          echo "FFMPEG_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          
          # Set individual library paths
          echo "FFMPEG_AVCODEC_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVFORMAT_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVUTIL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVDEVICE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_AVFILTER_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_SWSCALE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "FFMPEG_SWRESAMPLE_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          
          # For bindgen - add comprehensive include paths
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/include -I/usr/include/x86_64-linux-gnu" >> $GITHUB_ENV
          
          # Additional environment variables that ffmpeg-sys-next might need
          echo "FFMPEG_PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
          
          # Dynamically find libclang path (Ubuntu runners may have different LLVM versions)
          LIBCLANG_PATH=""
          for llvm_version in 16 15 14 13 12; do
            if [ -d "/usr/lib/llvm-${llvm_version}/lib" ] && [ -f "/usr/lib/llvm-${llvm_version}/lib/libclang.so" ]; then
              LIBCLANG_PATH="/usr/lib/llvm-${llvm_version}/lib"
              echo "Found libclang at LLVM version ${llvm_version}: $LIBCLANG_PATH"
              break
            fi
          done
          
          # Fallback to finding libclang in system lib directories
          if [ -z "$LIBCLANG_PATH" ]; then
            for lib_path in "/usr/lib/x86_64-linux-gnu" "/usr/lib" "/lib/x86_64-linux-gnu"; do
              if [ -f "${lib_path}/libclang.so" ] || [ -f "${lib_path}/libclang.so.1" ]; then
                LIBCLANG_PATH="$lib_path"
                echo "Found libclang at system path: $LIBCLANG_PATH"
                break
              fi
            done
          fi
          
          if [ -n "$LIBCLANG_PATH" ]; then
            echo "LIBCLANG_PATH=$LIBCLANG_PATH" >> $GITHUB_ENV
          else
            echo "WARNING: libclang not found, build may fail. Installing clang..."
            sudo apt-get install -y clang libclang-dev
            # Try to find it again after installation
            LIBCLANG_PATH=$(find /usr/lib -name "libclang.so*" -type f 2>/dev/null | head -1 | xargs dirname)
            if [ -n "$LIBCLANG_PATH" ]; then
              echo "LIBCLANG_PATH=$LIBCLANG_PATH" >> $GITHUB_ENV
            fi
          fi
          
          # Force ffmpeg-sys-next to use pkg-config instead of manual header search
          echo "FFMPEG_NO_MANUAL_HEADER_SEARCH=1" >> $GITHUB_ENV
          echo "FFMPEG_USE_PKG_CONFIG=1" >> $GITHUB_ENV
          
          # Verify critical files exist
          if [ -f "/usr/include/libswscale/swscale.h" ]; then
            echo "✅ libswscale/swscale.h found"
          else
            echo "❌ libswscale/swscale.h not found, trying to locate..."
            find /usr -name "swscale.h" 2>/dev/null | head -5
          fi
          
          # Try main FFmpeg setup script
          if ! bash scripts/setup-ffmpeg-linux.sh; then
              echo "Main setup failed, trying pkg-config approach..."
              if [ -f "scripts/setup-ffmpeg-pkg-config.sh" ]; then
                bash scripts/setup-ffmpeg-pkg-config.sh
              else
                echo "Fallback script not found, continuing with basic setup..."
              fi
          fi
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ubuntu-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install frontend dependencies
        run: bun install
        
      - name: Frontend lint check
        run: bun run lint
        
      - name: Backend format check
        working-directory: src-tauri
        run: cargo fmt -- --check
        
      - name: Create dist directory for tauri context
        run: mkdir -p dist
        
      - name: Verify FFmpeg before clippy
        run: |
          echo "Final verification before clippy check..."
          echo "Environment variables:"
          echo "  FFMPEG_INCLUDE_DIR=$FFMPEG_INCLUDE_DIR"
          echo "  BINDGEN_EXTRA_CLANG_ARGS=$BINDGEN_EXTRA_CLANG_ARGS"
          echo "  PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
          
          echo "Critical files check:"
          [ -f "/usr/include/libswscale/swscale.h" ] && echo "✅ /usr/include/libswscale/swscale.h exists" || echo "❌ /usr/include/libswscale/swscale.h missing"
          [ -f "/usr/include/libavutil/avutil.h" ] && echo "✅ /usr/include/libavutil/avutil.h exists" || echo "❌ /usr/include/libavutil/avutil.h missing"
          
          # Try to find swscale.h if it's missing
          if [ ! -f "/usr/include/libswscale/swscale.h" ]; then
            echo "Searching for swscale.h in system..."
            find /usr -name "swscale.h" 2>/dev/null | head -5
            # Try to create missing symlinks
            SWSCALE_ACTUAL=$(find /usr -name "swscale.h" 2>/dev/null | head -1)
            if [ -n "$SWSCALE_ACTUAL" ]; then
              SWSCALE_DIR=$(dirname "$SWSCALE_ACTUAL")
              echo "Found swscale.h at: $SWSCALE_ACTUAL"
              echo "Directory: $SWSCALE_DIR"
              # Try to create symlink
              sudo mkdir -p /usr/include/libswscale 2>/dev/null || true
              sudo ln -sf "$SWSCALE_ACTUAL" /usr/include/libswscale/swscale.h 2>/dev/null || true
            fi
          fi
          
      - name: Backend clippy check
        working-directory: src-tauri
        run: cargo clippy --lib -- -D warnings
        
      - name: Quick backend test (core modules only)
        working-directory: src-tauri
        run: |
          # Run only critical backend tests to catch major issues quickly
          cargo test --lib language_tauri::tests -- --test-threads=1
          cargo test --lib command_registry::tests -- --test-threads=1
          cargo test --lib core::di::tests -- --test-threads=1
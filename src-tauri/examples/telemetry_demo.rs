//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å OpenTelemetry

use timeline_studio_lib::core::{
    TelemetryManager, TelemetryConfig, Tracer, MetricsCollector,
    ServiceContainer, Service, EventBus, AppEvent,
    telemetry::{TelemetryConfigBuilder, LogLevel, metrics::Metrics},
};
use std::sync::Arc;
use std::time::Duration;
use tokio::time::sleep;

/// –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π
struct MediaProcessorService {
    tracer: Arc<Tracer>,
    metrics: Arc<Metrics>,
}

impl MediaProcessorService {
    fn new(tracer: Arc<Tracer>, collector: Arc<MetricsCollector>) -> Self {
        let metrics = Arc::new(Metrics::new(&collector).expect("Failed to create metrics"));
        
        Self {
            tracer,
            metrics,
        }
    }
    
    async fn process_media(&self, file_path: &str) -> Result<(), Box<dyn std::error::Error>> {
        // –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        self.tracer.trace("media.process", async {
            log::info!("Processing media file: {}", file_path);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            self.metrics.media_files_imported
                .with_label("type", "video")
                .inc();
            
            // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.metrics.media_processing_duration
                .with_label("type", "video")
                .time(async {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    sleep(Duration::from_millis(100)).await;
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
                    self.tracer.trace("media.decode", async {
                        sleep(Duration::from_millis(30)).await;
                        Ok::<_, Box<dyn std::error::Error>>(())
                    }).await?;
                    
                    self.tracer.trace("media.analyze", async {
                        sleep(Duration::from_millis(50)).await;
                        Ok::<_, Box<dyn std::error::Error>>(())
                    }).await?;
                    
                    self.tracer.trace("media.thumbnail", async {
                        sleep(Duration::from_millis(20)).await;
                        Ok::<_, Box<dyn std::error::Error>>(())
                    }).await?;
                })
                .await;
            
            log::info!("Media processing completed");
            Ok(())
        }).await
    }
}

/// –ü—Ä–∏–º–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞
struct RenderService {
    tracer: Arc<Tracer>,
    metrics: Arc<Metrics>,
    event_bus: Arc<EventBus>,
}

impl RenderService {
    fn new(
        tracer: Arc<Tracer>,
        collector: Arc<MetricsCollector>,
        event_bus: Arc<EventBus>,
    ) -> Self {
        let metrics = Arc::new(Metrics::new(&collector).expect("Failed to create metrics"));
        
        Self {
            tracer,
            metrics,
            event_bus,
        }
    }
    
    async fn render_project(&self, project_id: &str) -> Result<(), Box<dyn std::error::Error>> {
        let job_id = uuid::Uuid::new_v4().to_string();
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        let result = self.tracer
            .span("render.job")
            .with_attribute("project.id", project_id)
            .with_attribute("job.id", &job_id)
            .run(async {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.metrics.render_jobs_total
                    .with_label("project", project_id)
                    .inc();
                
                self.metrics.render_jobs_active.add(1);
                
                // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞
                self.event_bus.publish_app_event(AppEvent::RenderStarted {
                    job_id: job_id.clone(),
                    project_id: project_id.to_string(),
                }).await?;
                
                // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                self.metrics.render_duration
                    .with_label("project", project_id)
                    .time(async {
                        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                        for i in 0..10 {
                            sleep(Duration::from_millis(100)).await;
                            
                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã
                            self.metrics.render_frames_processed
                                .with_label("project", project_id)
                                .increment(10);
                            
                            // –ü—É–±–ª–∏–∫—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            self.event_bus.publish_app_event(AppEvent::RenderProgress {
                                job_id: job_id.clone(),
                                progress: (i + 1) as f32 * 10.0,
                            }).await?;
                        }
                    })
                    .await;
                
                // –£–º–µ–Ω—å—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                self.metrics.render_jobs_active.add(-1);
                
                // –ü—É–±–ª–∏–∫—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                self.event_bus.publish_app_event(AppEvent::RenderCompleted {
                    job_id: job_id.clone(),
                    output_path: "/path/to/output.mp4".to_string(),
                }).await?;
                
                Ok::<_, Box<dyn std::error::Error>>(())
            })
            .await;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if let Err(e) = &result {
            self.metrics.render_errors_total
                .with_label("project", project_id)
                .with_label("error_type", "unknown")
                .inc();
            
            self.event_bus.publish_app_event(AppEvent::RenderFailed {
                job_id,
                error: e.to_string(),
            }).await?;
        }
        
        result
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    env_logger::init();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    let telemetry_config = TelemetryConfigBuilder::new()
        .service_name("timeline-studio-demo")
        .environment("development")
        .log_level(LogLevel::Debug)
        .sample_rate(1.0) // 100% —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
        .build();
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    let telemetry_manager = TelemetryManager::new(telemetry_config).await?;
    let tracer = telemetry_manager.tracer();
    let metrics_collector = telemetry_manager.metrics();
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let event_bus = Arc::new(EventBus::new());
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    let media_processor = MediaProcessorService::new(
        tracer.clone(),
        metrics_collector.clone(),
    );
    
    let render_service = RenderService::new(
        tracer.clone(),
        metrics_collector.clone(),
        event_bus.clone(),
    );
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    println!("üöÄ Starting telemetry demo...\n");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
    println!("üìπ Processing media files...");
    for i in 1..=3 {
        let file_path = format!("/videos/clip_{}.mp4", i);
        media_processor.process_media(&file_path).await?;
    }
    
    println!("\nüé¨ Rendering project...");
    render_service.render_project("demo-project-123").await?;
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    println!("\nüìä Collecting system metrics...");
    metrics_collector.collect_system_metrics().await?;
    
    // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ spans
    println!("\nüîç Demonstrating nested spans...");
    tracer.trace("complex_operation", async {
        log::info!("Starting complex operation");
        
        // –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø
        tracer.trace("stage_1", async {
            log::info!("Executing stage 1");
            sleep(Duration::from_millis(50)).await;
            Ok::<_, Box<dyn std::error::Error>>(())
        }).await?;
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        let (result1, result2) = tokio::join!(
            tracer.trace("parallel_task_1", async {
                log::info!("Parallel task 1");
                sleep(Duration::from_millis(100)).await;
                Ok::<i32, Box<dyn std::error::Error>>(42)
            }),
            tracer.trace("parallel_task_2", async {
                log::info!("Parallel task 2");
                sleep(Duration::from_millis(80)).await;
                Ok::<i32, Box<dyn std::error::Error>>(24)
            })
        );
        
        let sum = result1? + result2?;
        log::info!("Complex operation completed with result: {}", sum);
        
        Ok::<_, Box<dyn std::error::Error>>(())
    }).await?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    println!("\n‚ùå Demonstrating error handling...");
    let error_result = tracer.trace("failing_operation", async {
        log::info!("Starting operation that will fail");
        sleep(Duration::from_millis(50)).await;
        Err::<(), Box<dyn std::error::Error>>("Simulated error".into())
    }).await;
    
    if let Err(e) = error_result {
        log::error!("Operation failed as expected: {}", e);
    }
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    println!("\n‚è≥ Waiting for telemetry export...");
    sleep(Duration::from_secs(2)).await;
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    println!("\n‚úÖ Shutting down telemetry...");
    telemetry_manager.shutdown().await?;
    
    println!("\nüéâ Demo completed!");
    println!("\nNote: In production, telemetry data would be sent to:");
    println!("  - Jaeger/Tempo for distributed tracing");
    println!("  - Prometheus/Grafana for metrics");
    println!("  - Elasticsearch/Loki for logs");
    
    Ok(())
}
//! Refactored Pipeline - –ú–æ–¥—É–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ

use std::path::PathBuf;
use std::sync::Arc;
use std::time::{Duration, Instant};
use tokio::sync::RwLock;

use crate::video_compiler::error::{Result, VideoCompilerError};
use crate::video_compiler::ffmpeg_builder::FFmpegBuilder;
use crate::video_compiler::progress::ProgressTracker;
use crate::video_compiler::schema::ProjectSchema;
use crate::video_compiler::CompilerSettings;

use super::stages::{
  CompositionStage, EncodingStage, FinalizationStage, PipelineContext, PipelineStage,
  PipelineStatistics, PreprocessingStage, ValidationStage,
};

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
pub struct RenderPipeline {
  /// –°—Ö–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∞
  project: ProjectSchema,
  /// –≠—Ç–∞–ø—ã –∫–æ–Ω–≤–µ–π–µ—Ä–∞
  stages: Vec<Box<dyn PipelineStage>>,
  /// –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  #[allow(dead_code)]
  progress_tracker: Arc<ProgressTracker>,
  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  settings: Arc<RwLock<CompilerSettings>>,
  /// –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  context: PipelineContext,
  /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  statistics: PipelineStatistics,
  /// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  start_time: Option<Instant>,
}

impl RenderPipeline {
  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä
  pub async fn new(
    project: ProjectSchema,
    progress_tracker: Arc<ProgressTracker>,
    settings: Arc<RwLock<CompilerSettings>>,
    output_path: PathBuf,
  ) -> Result<Self> {
    let mut context = PipelineContext::new(project.clone(), output_path);
    let ffmpeg_builder = FFmpegBuilder::new(project.clone());

    // –î–æ–±–∞–≤–ª—è–µ–º ffmpeg_builder –∏ progress_tracker –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.ffmpeg_builder = Some(ffmpeg_builder);
    context.progress_tracker = Some(progress_tracker.clone());

    let mut pipeline = Self {
      project,
      stages: Vec::new(),
      progress_tracker,
      settings,
      context,
      statistics: PipelineStatistics::default(),
      start_time: None,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã
    pipeline.add_default_stages().await?;

    Ok(pipeline)
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã –∫–æ–Ω–≤–µ–π–µ—Ä–∞
  async fn add_default_stages(&mut self) -> Result<()> {
    self.add_stage(Box::new(ValidationStage::new()));
    self.add_stage(Box::new(PreprocessingStage::new()));
    self.add_stage(Box::new(CompositionStage::new()));
    self.add_stage(Box::new(EncodingStage::new()));
    self.add_stage(Box::new(FinalizationStage::new()));
    Ok(())
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø –≤ –∫–æ–Ω–≤–µ–π–µ—Ä
  pub fn add_stage(&mut self, stage: Box<dyn PipelineStage>) {
    log::debug!("–î–æ–±–∞–≤–ª–µ–Ω —ç—Ç–∞–ø: {}", stage.name());
    self.stages.push(stage);
  }

  /// –í—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–∞–ø –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
  pub fn insert_stage(&mut self, index: usize, stage: Box<dyn PipelineStage>) {
    if index <= self.stages.len() {
      log::debug!("–í—Å—Ç–∞–≤–ª–µ–Ω —ç—Ç–∞–ø {} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {}", stage.name(), index);
      self.stages.insert(index, stage);
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø –ø–æ –∏–º–µ–Ω–∏
  pub fn remove_stage(&mut self, name: &str) -> bool {
    if let Some(pos) = self.stages.iter().position(|stage| stage.name() == name) {
      let removed = self.stages.remove(pos);
      log::debug!("–£–¥–∞–ª–µ–Ω —ç—Ç–∞–ø: {}", removed.name());
      true
    } else {
      false
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤
  pub fn get_stage_names(&self) -> Vec<String> {
    self
      .stages
      .iter()
      .map(|stage| stage.name().to_string())
      .collect()
  }

  /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Å—å –∫–æ–Ω–≤–µ–π–µ—Ä
  pub async fn execute(&mut self, job_id: &str) -> Result<PathBuf> {
    self.start_time = Some(Instant::now());

    log::info!("=== –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===");
    log::info!("ID –∑–∞–¥–∞—á–∏: {}", job_id);
    log::info!("–ü—Ä–æ–µ–∫—Ç: {}", self.project.metadata.name);
    log::info!("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {:?}", self.context.output_path);
    log::info!("–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {:?}", self.context.temp_dir);
    log::info!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤: {}", self.stages.len());

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    self.context.current_job_id = Some(job_id.to_string());

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    self.context.ensure_temp_dir().await?;

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–æ—á–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
    let total_estimated_duration: Duration = self
      .stages
      .iter()
      .map(|stage| stage.estimated_duration())
      .sum();

    log::info!("‚è±Ô∏è –û—Ü–µ–Ω–æ—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {:?}", total_estimated_duration);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø
    let mut _current_progress = 0u64;
    let progress_per_stage = 100 / self.stages.len() as u64;

    for (index, stage) in self.stages.iter().enumerate() {
      if self.context.is_cancelled() {
        log::warn!("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
        self.cleanup().await?;
        return Err(VideoCompilerError::CancelledError(
          "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞".to_string(),
        ));
      }

      let stage_start = Instant::now();
      log::info!(
        "üöÄ –≠—Ç–∞–ø {}/{}: {}",
        index + 1,
        self.stages.len(),
        stage.name()
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø
      if stage.can_skip(&self.context) {
        log::info!("‚è≠Ô∏è –≠—Ç–∞–ø {} –ø—Ä–æ–ø—É—â–µ–Ω", stage.name());
        _current_progress += progress_per_stage;
        continue;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø
      match stage.process(&mut self.context).await {
        Ok(_) => {
          let stage_duration = stage_start.elapsed();
          self
            .statistics
            .stage_durations
            .insert(stage.name().to_string(), stage_duration);

          _current_progress += progress_per_stage;
          log::info!("‚úÖ –≠—Ç–∞–ø {} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {:?}", stage.name(), stage_duration);
        }
        Err(e) => {
          log::error!("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ {}: {}", stage.name(), e);
          self.cleanup().await?;
          return Err(e);
        }
      }
    }

    // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if let Some(start_time) = self.start_time {
      self.statistics.total_duration = start_time.elapsed();
    }

    if let Ok(metadata) = tokio::fs::metadata(&self.context.output_path).await {
      self.statistics.output_file_size = metadata.len();
    }

    log::info!("üéâ –ö–æ–Ω–≤–µ–π–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    log::info!("üìä –û–±—â–µ–µ –≤—Ä–µ–º—è: {:?}", self.statistics.total_duration);
    log::info!("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {:?}", self.context.output_path);

    Ok(self.context.output_path.clone())
  }

  /// –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞
  pub async fn cancel(&mut self) -> Result<()> {
    log::warn!("üõë –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–∞...");
    self.context.cancelled = true;
    self.cleanup().await
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  async fn cleanup(&self) -> Result<()> {
    log::info!("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...");

    if let Err(e) = self.context.cleanup().await {
      log::warn!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {}", e);
    }

    Ok(())
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  pub fn get_statistics(&self) -> &PipelineStatistics {
    &self.statistics
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  pub fn get_context(&self) -> &PipelineContext {
    &self.context
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –º—É—Ç–∞–±–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  #[allow(dead_code)]
  pub fn get_context_mut(&mut self) -> &mut PipelineContext {
    &mut self.context
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω–≤–µ–π–µ—Ä
  pub fn is_running(&self) -> bool {
    self.start_time.is_some() && !self.context.is_cancelled()
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
  pub async fn get_progress(&self) -> u64 {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    // –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∏ –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    0
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ–π–µ—Ä–∞
  pub async fn update_settings(&mut self, new_settings: CompilerSettings) -> Result<()> {
    let mut settings = self.settings.write().await;
    *settings = new_settings;
    log::debug!("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    Ok(())
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  pub async fn validate_configuration(&self) -> Result<()> {
    log::info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ–π–µ—Ä–∞...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ø–æ–≤
    if self.stages.is_empty() {
      return Err(VideoCompilerError::ValidationError(
        "–ö–æ–Ω–≤–µ–π–µ—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∞–ø–æ–≤".to_string(),
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞
    if self.project.metadata.name.is_empty() {
      return Err(VideoCompilerError::ValidationError(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º".to_string(),
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if let Some(parent) = self.context.output_path.parent() {
      if !parent.exists() {
        return Err(VideoCompilerError::ValidationError(format!(
          "–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {:?}",
          parent
        )));
      }
    }

    log::info!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞");
    Ok(())
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  pub fn create_execution_summary(&self) -> ExecutionSummary {
    ExecutionSummary {
      project_name: self.project.metadata.name.clone(),
      total_stages: self.stages.len(),
      completed_stages: self.statistics.stage_durations.len(),
      total_duration: self.statistics.total_duration,
      output_file: self.context.output_path.clone(),
      output_file_size: self.statistics.output_file_size,
      success: !self.context.is_cancelled(),
      stage_details: self.statistics.stage_durations.clone(),
    }
  }
}

/// –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
pub struct PipelineBuilder {
  project: Option<ProjectSchema>,
  output_path: Option<PathBuf>,
  custom_stages: Vec<Box<dyn PipelineStage>>,
  skip_default_stages: bool,
}

impl PipelineBuilder {
  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å
  pub fn new() -> Self {
    Self {
      project: None,
      output_path: None,
      custom_stages: Vec::new(),
      skip_default_stages: false,
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
  pub fn with_project(mut self, project: ProjectSchema) -> Self {
    self.project = Some(project);
    self
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
  pub fn with_output_path(mut self, path: PathBuf) -> Self {
    self.output_path = Some(path);
    self
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç—Ç–∞–ø
  pub fn add_stage(mut self, stage: Box<dyn PipelineStage>) -> Self {
    self.custom_stages.push(stage);
    self
  }

  /// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã
  pub fn skip_default_stages(mut self) -> Self {
    self.skip_default_stages = true;
    self
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–≤–µ–π–µ—Ä
  pub async fn build(
    self,
    progress_tracker: Arc<ProgressTracker>,
    settings: Arc<RwLock<CompilerSettings>>,
  ) -> Result<RenderPipeline> {
    let project = self
      .project
      .ok_or_else(|| VideoCompilerError::ValidationError("–ü—Ä–æ–µ–∫—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω".to_string()))?;

    let output_path = self.output_path.ok_or_else(|| {
      VideoCompilerError::ValidationError("–í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω".to_string())
    })?;

    let mut pipeline = if self.skip_default_stages {
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω–≤–µ–π–µ—Ä
      let context = PipelineContext::new(project.clone(), output_path);
      RenderPipeline {
        project,
        stages: Vec::new(),
        progress_tracker,
        settings,
        context,
        statistics: PipelineStatistics::default(),
        start_time: None,
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏
      RenderPipeline::new(project, progress_tracker, settings, output_path).await?
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç—Ç–∞–ø—ã
    for stage in self.custom_stages {
      pipeline.add_stage(stage);
    }

    Ok(pipeline)
  }
}

impl Default for PipelineBuilder {
  fn default() -> Self {
    Self::new()
  }
}

/// –†–µ–∑—é–º–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–∞
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
pub struct ExecutionSummary {
  pub project_name: String,
  pub total_stages: usize,
  pub completed_stages: usize,
  pub total_duration: Duration,
  pub output_file: PathBuf,
  pub output_file_size: u64,
  pub success: bool,
  pub stage_details: std::collections::HashMap<String, Duration>,
}

#[cfg(test)]
mod tests {
  use super::*;
  use crate::video_compiler::schema::{ProjectMetadata, ProjectSettings, Timeline};

  fn create_test_project() -> ProjectSchema {
    ProjectSchema {
      version: "1.0.0".to_string(),
      metadata: ProjectMetadata {
        name: "Test Project".to_string(),
        description: None,
        created_at: chrono::Utc::now(),
        modified_at: chrono::Utc::now(),
        author: None,
      },
      timeline: Timeline::default(),
      tracks: vec![],
      effects: vec![],
      transitions: vec![],
      filters: vec![],
      templates: vec![],
      style_templates: vec![],
      subtitles: vec![],
      settings: ProjectSettings::default(),
    }
  }

  #[tokio::test]
  async fn test_pipeline_builder() {
    let project = create_test_project();
    let output_path = std::env::temp_dir().join("test_output.mp4");
    let (progress_sender, _progress_receiver) = tokio::sync::mpsc::unbounded_channel();
    let progress_tracker = Arc::new(ProgressTracker::new(progress_sender));
    let settings = Arc::new(RwLock::new(CompilerSettings::default()));

    let pipeline = PipelineBuilder::new()
      .with_project(project)
      .with_output_path(output_path)
      .build(progress_tracker, settings)
      .await;

    assert!(pipeline.is_ok());
    let pipeline = pipeline.unwrap();
    assert_eq!(pipeline.stages.len(), 5); // 5 default stages
  }

  #[tokio::test]
  async fn test_pipeline_stage_management() {
    let project = create_test_project();
    let output_path = std::env::temp_dir().join("test_output.mp4");
    let (progress_sender, _progress_receiver) = tokio::sync::mpsc::unbounded_channel();
    let progress_tracker = Arc::new(ProgressTracker::new(progress_sender));
    let settings = Arc::new(RwLock::new(CompilerSettings::default()));

    let mut pipeline = RenderPipeline::new(project, progress_tracker, settings, output_path)
      .await
      .unwrap();

    let initial_count = pipeline.stages.len();

    // –£–¥–∞–ª—è–µ–º —ç—Ç–∞–ø
    assert!(pipeline.remove_stage("Validation"));
    assert_eq!(pipeline.stages.len(), initial_count - 1);

    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø –æ–±—Ä–∞—Ç–Ω–æ
    pipeline.add_stage(Box::new(ValidationStage::new()));
    assert_eq!(pipeline.stages.len(), initial_count);
  }

  #[test]
  fn test_execution_summary() {
    let project = create_test_project();
    let output_path = std::env::temp_dir().join("test_output.mp4");
    let context = PipelineContext::new(project.clone(), output_path.clone());

    let pipeline = RenderPipeline {
      project,
      stages: vec![],
      progress_tracker: {
        let (progress_sender, _) = tokio::sync::mpsc::unbounded_channel();
        Arc::new(ProgressTracker::new(progress_sender))
      },
      settings: Arc::new(RwLock::new(CompilerSettings::default())),
      context,
      statistics: PipelineStatistics::default(),
      start_time: Some(Instant::now()),
    };

    let summary = pipeline.create_execution_summary();
    assert_eq!(summary.project_name, "Test Project");
    assert_eq!(summary.output_file, output_path);
  }
}

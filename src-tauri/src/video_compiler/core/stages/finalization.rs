//! Finalization Stage - –≠—Ç–∞–ø —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞

use async_trait::async_trait;
use std::path::PathBuf;
use std::time::{Duration, SystemTime};

use super::{PipelineContext, PipelineStage};
use crate::video_compiler::error::{Result, VideoCompilerError};

/// –≠—Ç–∞–ø —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
pub struct FinalizationStage;

impl FinalizationStage {
  pub fn new() -> Self {
    Self
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async fn cleanup_temporary_files(&self, context: &mut PipelineContext) -> Result<()> {
    log::info!("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...");

    let mut cleaned_count = 0;
    let mut total_size_cleaned = 0u64;

    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (key, path) in &context.intermediate_files {
      if path.exists() {
        if let Ok(metadata) = tokio::fs::metadata(path).await {
          total_size_cleaned += metadata.len();
        }

        match tokio::fs::remove_file(path).await {
          Ok(_) => {
            cleaned_count += 1;
            log::debug!("üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {} ({})", key, path.display());
          }
          Err(e) => {
            log::warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {}: {}", path.display(), e);
          }
        }
      }
    }

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if context.temp_dir.exists() {
      match tokio::fs::remove_dir_all(&context.temp_dir).await {
        Ok(_) => {
          log::debug!("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {:?}", context.temp_dir);
        }
        Err(e) => {
          log::warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}");
        }
      }
    }

    context.update_progress(30, "Finalization").await?;

    log::info!(
      "‚úÖ –û—á–∏—â–µ–Ω–æ {} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {} MB",
      cleaned_count,
      total_size_cleaned / 1_000_000
    );
    Ok(())
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  async fn generate_output_metadata(&self, context: &mut PipelineContext) -> Result<()> {
    log::info!("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...");

    let metadata = self.collect_output_metadata(context).await?;
    let metadata_path = context.output_path.with_extension("json");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    let metadata_json = serde_json::to_string_pretty(&metadata)
      .map_err(|e| VideoCompilerError::SerializationError(e.to_string()))?;

    tokio::fs::write(&metadata_path, metadata_json)
      .await
      .map_err(|e| VideoCompilerError::IoError(e.to_string()))?;

    context.update_progress(60, "Finalization").await?;

    log::info!("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_path:?}");
    Ok(())
  }

  /// –°–±–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  async fn collect_output_metadata(&self, context: &PipelineContext) -> Result<OutputMetadata> {
    let mut metadata = OutputMetadata {
      project_name: context.project.metadata.name.clone(),
      output_file: context.output_path.to_string_lossy().to_string(),
      created_at: SystemTime::now(),
      export_settings: context.project.settings.clone(),
      ..Default::default()
    };

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if let Ok(file_metadata) = tokio::fs::metadata(&context.output_path).await {
      metadata.file_size = file_metadata.len();
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ FFprobe
    if let Ok(media_info) = self.get_media_info(&context.output_path).await {
      metadata.duration = media_info.duration;
      metadata.actual_width = media_info.width;
      metadata.actual_height = media_info.height;
      metadata.actual_fps = media_info.fps;
      metadata.bitrate = media_info.bitrate;
      metadata.codec = media_info.codec;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    metadata.tracks_count = context.project.tracks.len();
    metadata.clips_count = context
      .project
      .tracks
      .iter()
      .map(|track| track.clips.len())
      .sum();

    Ok(metadata)
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ FFprobe
  async fn get_media_info(&self, file_path: &PathBuf) -> Result<MediaInfo> {
    let mut command = tokio::process::Command::new("ffprobe");
    command
      .arg("-v")
      .arg("quiet")
      .arg("-print_format")
      .arg("json")
      .arg("-show_format")
      .arg("-show_streams")
      .arg(file_path);

    let output = command
      .output()
      .await
      .map_err(|e| VideoCompilerError::IoError(e.to_string()))?;

    if !output.status.success() {
      let error_msg = String::from_utf8_lossy(&output.stderr);
      return Err(VideoCompilerError::IoError(error_msg.to_string()));
    }

    let json_output = String::from_utf8_lossy(&output.stdout);
    let info: serde_json::Value = serde_json::from_str(&json_output)
      .map_err(|e| VideoCompilerError::SerializationError(e.to_string()))?;

    let mut media_info = MediaInfo::default();

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if let Some(format) = info.get("format") {
      if let Some(duration_str) = format.get("duration").and_then(|d| d.as_str()) {
        media_info.duration = duration_str.parse().unwrap_or(0.0);
      }
      if let Some(bitrate_str) = format.get("bit_rate").and_then(|b| b.as_str()) {
        media_info.bitrate = bitrate_str.parse().unwrap_or(0);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–µ
    if let Some(streams) = info.get("streams").and_then(|s| s.as_array()) {
      for stream in streams {
        if stream.get("codec_type").and_then(|t| t.as_str()) == Some("video") {
          media_info.width = stream
            .get("width")
            .and_then(|w| w.as_u64())
            .map(|w| w as u32);
          media_info.height = stream
            .get("height")
            .and_then(|h| h.as_u64())
            .map(|h| h as u32);
          media_info.codec = stream
            .get("codec_name")
            .and_then(|c| c.as_str())
            .map(|s| s.to_string());

          // –ü–∞—Ä—Å–∏–º FPS
          if let Some(fps_str) = stream.get("r_frame_rate").and_then(|f| f.as_str()) {
            media_info.fps = self.parse_fps(fps_str);
          }
          break;
        }
      }
    }

    Ok(media_info)
  }

  /// –ü–∞—Ä—Å–∏–Ω–≥ FPS –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "30/1"
  fn parse_fps(&self, fps_str: &str) -> Option<f64> {
    if let Some((num_str, den_str)) = fps_str.split_once('/') {
      if let (Ok(num), Ok(den)) = (num_str.parse::<f64>(), den_str.parse::<f64>()) {
        if den > 0.0 {
          return Some(num / den);
        }
      }
    }
    fps_str.parse().ok()
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞
  async fn create_preview_thumbnail(&self, context: &mut PipelineContext) -> Result<()> {
    log::info!("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é...");

    let thumbnail_path = context.output_path.with_extension("jpg");

    let mut command = tokio::process::Command::new("ffmpeg");
    command
      .arg("-i")
      .arg(&context.output_path)
      .arg("-ss")
      .arg("00:00:01") // –ö–∞–¥—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      .arg("-vframes")
      .arg("1")
      .arg("-vf")
      .arg("scale=320:240") // –ú–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é
      .arg("-y")
      .arg(&thumbnail_path);

    let output = command
      .output()
      .await
      .map_err(|e| VideoCompilerError::IoError(e.to_string()))?;

    if output.status.success() {
      log::info!("‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {thumbnail_path:?}");
    } else {
      log::warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é");
    }

    context.update_progress(80, "Finalization").await?;
    Ok(())
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  async fn validate_result(&self, context: &mut PipelineContext) -> Result<()> {
    log::info!("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if !context.output_path.exists() {
      return Err(VideoCompilerError::ValidationError(
        "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç".to_string(),
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    let metadata = tokio::fs::metadata(&context.output_path)
      .await
      .map_err(|e| VideoCompilerError::IoError(e.to_string()))?;

    if metadata.len() == 0 {
      return Err(VideoCompilerError::ValidationError(
        "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç".to_string(),
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ FFprobe
    let media_info = self.get_media_info(&context.output_path).await?;

    if media_info.duration <= 0.0 {
      return Err(VideoCompilerError::ValidationError(
        "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å".to_string(),
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —ç–∫—Å–ø–æ—Ä—Ç–∞
    let export_settings = &context.project.settings;

    if let (Some(width), Some(height)) = (media_info.width, media_info.height) {
      if width != export_settings.resolution.width || height != export_settings.resolution.height {
        log::warn!(
          "‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {}x{} –≤–º–µ—Å—Ç–æ {}x{}",
          width,
          height,
          export_settings.resolution.width,
          export_settings.resolution.height
        );
      }
    }

    context.update_progress(95, "Finalization").await?;

    log::info!("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω");
    log::info!("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {} MB", metadata.len() / 1_000_000);
    log::info!("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {:.2}s", media_info.duration);

    Ok(())
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  async fn send_completion_notification(&self, context: &mut PipelineContext) -> Result<()> {
    log::info!("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏...");

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ webhook, email, –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    context.update_progress(100, "Finalization").await?;

    log::info!("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    log::info!("üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {:?}", context.output_path);

    Ok(())
  }
}

#[async_trait]
impl PipelineStage for FinalizationStage {
  async fn process(&self, context: &mut PipelineContext) -> Result<()> {
    log::info!("üèÅ === –≠—Ç–∞–ø —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ ===");

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    self.validate_result(context).await?;

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
    self.create_preview_thumbnail(context).await?;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    self.generate_output_metadata(context).await?;

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    self.cleanup_temporary_files(context).await?;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    self.send_completion_notification(context).await?;

    log::info!("‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    Ok(())
  }

  fn name(&self) -> &str {
    "Finalization"
  }

  fn estimated_duration(&self) -> Duration {
    Duration::from_secs(30)
  }
}

impl Default for FinalizationStage {
  fn default() -> Self {
    Self::new()
  }
}

/// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
struct OutputMetadata {
  project_name: String,
  output_file: String,
  created_at: SystemTime,
  file_size: u64,
  duration: f64,
  export_settings: crate::video_compiler::schema::export::ProjectSettings,
  actual_width: Option<u32>,
  actual_height: Option<u32>,
  actual_fps: Option<f64>,
  bitrate: u64,
  codec: Option<String>,
  tracks_count: usize,
  clips_count: usize,
}

impl Default for OutputMetadata {
  fn default() -> Self {
    Self {
      project_name: String::new(),
      output_file: String::new(),
      created_at: SystemTime::now(),
      file_size: 0,
      duration: 0.0,
      export_settings: crate::video_compiler::schema::export::ProjectSettings::default(),
      actual_width: None,
      actual_height: None,
      actual_fps: None,
      bitrate: 0,
      codec: None,
      tracks_count: 0,
      clips_count: 0,
    }
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
#[derive(Debug, Default)]
struct MediaInfo {
  duration: f64,
  width: Option<u32>,
  height: Option<u32>,
  fps: Option<f64>,
  bitrate: u64,
  codec: Option<String>,
}

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn test_fps_parsing() {
    let stage = FinalizationStage::new();
    assert_eq!(stage.parse_fps("30/1"), Some(30.0));
    assert_eq!(stage.parse_fps("24000/1001"), Some(23.976023976023978));
    assert_eq!(stage.parse_fps("25"), Some(25.0));
    assert_eq!(stage.parse_fps("invalid"), None);
  }

  #[tokio::test]
  async fn test_finalization_stage_basic() {
    let stage = FinalizationStage::new();
    assert_eq!(stage.name(), "Finalization");
    assert!(!stage.estimated_duration().is_zero());
  }
}

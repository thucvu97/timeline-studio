//! Validation Stage - –≠—Ç–∞–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞

use async_trait::async_trait;
use std::path::Path;
use std::time::Duration;

use super::{PipelineContext, PipelineStage};
use crate::video_compiler::error::{Result, VideoCompilerError};
use crate::video_compiler::schema::ClipSource;

/// –≠—Ç–∞–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏
pub struct ValidationStage;

impl ValidationStage {
  pub fn new() -> Self {
    Self
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async fn validate_input_files(&self, context: &PipelineContext) -> Result<()> {
    log::info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...");

    for track in &context.project.tracks {
      for clip in &track.clips {
        match &clip.source {
          ClipSource::File(path) => {
            self.validate_media_file(path.as_str()).await?;
          }
          ClipSource::Generated => {
            // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–ø—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
          }
          ClipSource::Stream(_) => {
            // Stream sources validation not implemented yet
          }
          ClipSource::Device(_) => {
            // Device sources validation not implemented yet
          }
        }
      }
    }

    log::info!("‚úÖ –í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã");
    Ok(())
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
  async fn validate_media_file(&self, path: &str) -> Result<()> {
    let file_path = Path::new(path);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if !file_path.exists() {
      return Err(VideoCompilerError::ValidationError(format!(
        "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {}",
        path
      )));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    if !file_path.is_file() {
      return Err(VideoCompilerError::ValidationError(format!(
        "–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {}",
        path
      )));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    let metadata = tokio::fs::metadata(file_path).await.map_err(|e| {
      VideoCompilerError::ValidationError(format!(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ {}: {}",
        path, e
      ))
    })?;

    if metadata.len() == 0 {
      return Err(VideoCompilerError::ValidationError(format!(
        "–§–∞–π–ª –ø—É—Å—Ç: {}",
        path
      )));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if let Some(extension) = file_path.extension().and_then(|e| e.to_str()) {
      let ext = extension.to_lowercase();
      if !self.is_supported_format(&ext) {
        log::warn!("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {} ({})", path, ext);
      }
    }

    Ok(())
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  fn is_supported_format(&self, extension: &str) -> bool {
    matches!(
      extension,
      "mp4"
        | "mov"
        | "avi"
        | "mkv"
        | "webm"
        | "m4v"
        | "3gp"
        | "flv"
        | "jpg"
        | "jpeg"
        | "png"
        | "gif"
        | "bmp"
        | "tiff"
        | "webp"
        | "mp3"
        | "wav"
        | "aac"
        | "ogg"
        | "flac"
        | "m4a"
    )
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞
  async fn validate_project_schema(&self, context: &PipelineContext) -> Result<()> {
    log::info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞...");

    let project = &context.project;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    if project.metadata.name.is_empty() {
      return Err(VideoCompilerError::ValidationError(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º".to_string(),
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    let export = &project.settings;
    if export.resolution.width == 0 || export.resolution.height == 0 {
      return Err(VideoCompilerError::ValidationError(format!(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {}x{}",
        export.resolution.width, export.resolution.height
      )));
    }

    if export.frame_rate <= 0.0 {
      return Err(VideoCompilerError::ValidationError(format!(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: {}",
        export.frame_rate
      )));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–∏
    if project.tracks.is_empty() {
      return Err(VideoCompilerError::ValidationError(
        "–ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—Ä–µ–∫".to_string(),
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    let total_duration = self.calculate_total_duration(context);
    if total_duration <= 0.0 {
      return Err(VideoCompilerError::ValidationError(
        "–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0".to_string(),
      ));
    }

    log::info!("‚úÖ –°—Ö–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞");
    log::info!(
      "üìè –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {}x{}",
      export.resolution.width,
      export.resolution.height
    );
    log::info!("üéûÔ∏è FPS: {}", export.frame_rate);
    log::info!("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {:.2}s", total_duration);
    log::info!("üé¨ –¢—Ä–µ–∫–æ–≤: {}", project.tracks.len());

    Ok(())
  }

  /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
  fn calculate_total_duration(&self, context: &PipelineContext) -> f64 {
    let mut max_end_time = 0.0;

    for track in &context.project.tracks {
      for clip in &track.clips {
        let clip_end = clip.start_time + (clip.end_time - clip.start_time);
        if clip_end > max_end_time {
          max_end_time = clip_end;
        }
      }
    }

    max_end_time
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  async fn validate_output_directory(&self, context: &PipelineContext) -> Result<()> {
    log::info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...");

    if let Some(parent) = context.output_path.parent() {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if !parent.exists() {
        return Err(VideoCompilerError::ValidationError(format!(
          "–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {:?}",
          parent
        )));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
      let test_file = parent.join("test_write_permission.tmp");
      match tokio::fs::write(&test_file, "test").await {
        Ok(_) => {
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
          let _ = tokio::fs::remove_file(&test_file).await;
        }
        Err(e) => {
          return Err(VideoCompilerError::ValidationError(format!(
            "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {:?}: {}",
            parent, e
          )));
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if context.output_path.exists() {
      log::warn!(
        "‚ö†Ô∏è –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω: {:?}",
        context.output_path
      );
    }

    log::info!("‚úÖ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤–∞–ª–∏–¥–Ω–∞");
    Ok(())
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  async fn validate_system_requirements(&self, _context: &PipelineContext) -> Result<()> {
    log::info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    let available_space = self.get_available_disk_space().await?;
    let min_required_space = 1_000_000_000; // 1 GB

    if available_space < min_required_space {
      return Err(VideoCompilerError::ValidationError(format!(
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {} –±–∞–π—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: {} –±–∞–π—Ç",
        available_space, min_required_space
      )));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
    if !self.check_ffmpeg_availability().await {
      return Err(VideoCompilerError::ValidationError(
        "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ".to_string(),
      ));
    }

    log::info!("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
    log::info!("üíæ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç–∞: {} MB", available_space / 1_000_000);

    Ok(())
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
  async fn get_available_disk_space(&self) -> Result<u64> {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    // –î–ª—è macOS/Linux –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å statvfs, –¥–ª—è Windows - GetDiskFreeSpaceEx
    Ok(10_000_000_000) // 10 GB –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
  async fn check_ffmpeg_availability(&self) -> bool {
    match tokio::process::Command::new("ffmpeg")
      .arg("-version")
      .output()
      .await
    {
      Ok(output) => output.status.success(),
      Err(_) => false,
    }
  }
}

#[async_trait]
impl PipelineStage for ValidationStage {
  async fn process(&self, context: &mut PipelineContext) -> Result<()> {
    log::info!("üîç === –≠—Ç–∞–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ===");

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    context.update_progress(5, "Validation").await?;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞
    self.validate_project_schema(context).await?;
    context.update_progress(25, "Validation").await?;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    self.validate_input_files(context).await?;
    context.update_progress(50, "Validation").await?;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    self.validate_output_directory(context).await?;
    context.update_progress(75, "Validation").await?;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    self.validate_system_requirements(context).await?;
    context.update_progress(100, "Validation").await?;

    log::info!("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    Ok(())
  }

  fn name(&self) -> &str {
    "Validation"
  }

  fn estimated_duration(&self) -> Duration {
    Duration::from_secs(10)
  }
}

impl Default for ValidationStage {
  fn default() -> Self {
    Self::new()
  }
}

#[cfg(test)]
mod tests {
  use super::*;
  use crate::video_compiler::schema::{ProjectMetadata, ProjectSchema};

  fn create_test_context() -> PipelineContext {
    let project = ProjectSchema {
      version: "1.0.0".to_string(),
      metadata: ProjectMetadata {
        name: "Test Project".to_string(),
        description: Some("Test project description".to_string()),
        created_at: chrono::Utc::now(),
        modified_at: chrono::Utc::now(),
        author: Some("Test Author".to_string()),
      },
      timeline: crate::video_compiler::schema::timeline::Timeline {
        fps: 30,
        resolution: (1920, 1080),
        duration: 120.0,
        sample_rate: 48000,
        aspect_ratio: crate::video_compiler::schema::common::AspectRatio::Ratio16x9,
      },
      tracks: vec![],
      effects: vec![],
      transitions: vec![],
      filters: vec![],
      templates: vec![],
      style_templates: vec![],
      subtitles: vec![],
      settings: crate::video_compiler::schema::export::ProjectSettings::default(),
    };

    PipelineContext::new(project, std::env::temp_dir().join("test_output.mp4"))
  }

  #[tokio::test]
  async fn test_validation_stage_basic() {
    let stage = ValidationStage::new();
    assert_eq!(stage.name(), "Validation");
    assert!(!stage.estimated_duration().is_zero());
  }

  #[test]
  fn test_supported_formats() {
    let stage = ValidationStage::new();
    assert!(stage.is_supported_format("mp4"));
    assert!(stage.is_supported_format("jpg"));
    assert!(stage.is_supported_format("mp3"));
    assert!(!stage.is_supported_format("txt"));
  }

  #[test]
  fn test_duration_calculation() {
    let stage = ValidationStage::new();
    let context = create_test_context();
    let duration = stage.calculate_total_duration(&context);
    assert_eq!(duration, 0.0); // Empty timeline
  }
}

import { useCallback, useState } from "react"

import { invoke } from "@tauri-apps/api/core"

import { useCurrentProject } from "@/features/app-state/hooks/use-current-project"
import { MediaFile } from "@/features/media/types/media"
import { getMediaMetadata, selectAudioFile, selectMediaDirectory } from "@/lib/media"
import { convertToSavedMusicFile } from "@/lib/saved-media-utils"

/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Tauri
 */
const MAX_CONCURRENT_REQUESTS = 3

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
 */
const REQUEST_DELAY = 50

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞
 */
interface ImportResult {
  success: boolean
  message: string
  files: MediaFile[]
}

/**
 * –•—É–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
 * —Å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
 */
export function useMusicImport() {
  const [isImporting, setIsImporting] = useState(false)
  const [progress, setProgress] = useState(0)

  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç–µ–ø–µ—Ä—å –∑–∞–≥–ª—É—à–∫–∏)
  const { currentProject, setProjectDirty } = useCurrentProject()

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç)
   */
  const saveFilesToProject = useCallback(
    async (files: MediaFile[]) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–µ–∫—Ç
      if (!currentProject.path || files.length === 0) {
        return
      }

      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MediaFile –≤ SavedMusicFile
        const savedFiles = await Promise.all(
          files.map((file) => convertToSavedMusicFile(file, currentProject.path || undefined)),
        )

        // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedFiles.length} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç:`, savedFiles)

        // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
        setProjectDirty(true)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç:", error)
      }
    },
    [currentProject.path, setProjectDirty],
  )

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
   */
  const createBasicMusicFile = (filePath: string): MediaFile => {
    const fileName = filePath.split("/").pop() ?? "unknown"
    const fileExtension = fileName.split(".").pop()?.toLowerCase() ?? ""

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –¥–ª—è –º—É–∑—ã–∫–∏)
    const isAudio = ["mp3", "wav", "ogg", "flac", "aac", "m4a", "wma"].includes(fileExtension)

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    return {
      id: filePath,
      name: fileName,
      path: filePath,
      isVideo: false,
      isAudio,
      isImage: false,
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
      isLoadingMetadata: true,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç probeData, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –Ω–µ–º—É
      probeData: {
        streams: [],
        format: {},
      },
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –º–∏–Ω–∏–º—É–º–æ–º –¥–∞–Ω–Ω—ã—Ö, –∑–∞—Ç–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   */
  const processFiles = useCallback(
    async (filePaths: string[]): Promise<MediaFile[]> => {
      const totalFiles = filePaths.length

      // –®–ê–ì 1: –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ ${totalFiles} –±–∞–∑–æ–≤—ã—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`)
      const basicMusicFiles = filePaths.map(createBasicMusicFile)

      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      // addMusicFiles(basicMusicFiles); // –£–¥–∞–ª–µ–Ω
      console.log("–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", basicMusicFiles.length)

      // –®–ê–ì 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
      console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${totalFiles} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`)

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
      setTimeout(() => {
        void loadMusicMetadataWithPool(filePaths, totalFiles)
      }, 100) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è

      return basicMusicFiles
    },
    [], // –£–±—Ä–∞–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç addMusicFiles
  )

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º—É–∑—ã–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—É–ª–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  const loadMusicMetadataWithPool = async (filePaths: string[], totalFiles: number) => {
    let completedCount = 0
    let activeRequests = 0
    let currentIndex = 0

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const processFile = async (filePath: string, fileIndex: number): Promise<void> => {
      activeRequests++

      try {
        console.log(`[${fileIndex + 1}/${totalFiles}] üéµ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º—É–∑—ã–∫–∏: ${filePath.split("/").pop()}`)

        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        const metadata = await getMediaMetadata(filePath)

        if (metadata) {
          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
          const updatedMusicFile: MediaFile = {
            id: filePath,
            name: filePath.split("/").pop() ?? "unknown",
            path: filePath,
            isVideo: false,
            isAudio: metadata.is_audio,
            isImage: false,
            size: metadata.size,
            duration: metadata.duration,
            startTime: metadata.start_time,
            createdAt: metadata.creation_time,
            // –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º probeData –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            probeData: {
              streams: metadata.probe_data?.streams ?? [],
              format: metadata.probe_data?.format ?? {},
            },
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            isLoadingMetadata: false,
          }

          // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          // updateMusicFiles([updatedMusicFile]); // –£–¥–∞–ª–µ–Ω
          console.log("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è:", updatedMusicFile.name)

          console.log(`[${fileIndex + 1}/${totalFiles}] ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º—É–∑—ã–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${filePath.split("/").pop()}`)
        } else {
          // –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
          const fallbackMusicFile: MediaFile = {
            ...createBasicMusicFile(filePath),
            isLoadingMetadata: false,
          }
          // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          // updateMusicFiles([fallbackMusicFile]); // –£–¥–∞–ª–µ–Ω
          console.log("Fallback –¥–ª—è:", fallbackMusicFile.name)

          console.log(`[${fileIndex + 1}/${totalFiles}] ‚ö†Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º—É–∑—ã–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: ${filePath.split("/").pop()}`)
        }
      } catch (error) {
        console.error(
          `[${fileIndex + 1}/${totalFiles}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º—É–∑—ã–∫–∏ ${filePath.split("/").pop()}:`,
          error,
        )

        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        const errorMusicFile: MediaFile = {
          ...createBasicMusicFile(filePath),
          isLoadingMetadata: false,
        }
        // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        // updateMusicFiles([errorMusicFile]); // –£–¥–∞–ª–µ–Ω
        console.log("–û—à–∏–±–∫–∞ –¥–ª—è:", errorMusicFile.name)
      } finally {
        activeRequests--
        completedCount++

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        setProgress(Math.floor((completedCount / totalFiles) * 100))
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
    const startNextFile = async (): Promise<void> => {
      if (currentIndex >= filePaths.length || activeRequests >= MAX_CONCURRENT_REQUESTS) {
        return
      }

      const fileIndex = currentIndex++
      const filePath = filePaths[fileIndex]

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ (–Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
      void processFile(filePath, fileIndex).then(() => {
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª
        setTimeout(startNextFile, REQUEST_DELAY)
      })
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    console.log(
      `üéµ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${totalFiles} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—É–ª: ${MAX_CONCURRENT_REQUESTS})`,
    )

    for (let i = 0; i < Math.min(MAX_CONCURRENT_REQUESTS, filePaths.length); i++) {
      setTimeout(() => startNextFile(), i * REQUEST_DELAY)
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    while (completedCount < totalFiles) {
      await new Promise((resolve) => setTimeout(resolve, 100))
    }

    console.log(`üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º—É–∑—ã–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö ${totalFiles} —Ñ–∞–π–ª–æ–≤`)
  }

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
   */
  const importFile = useCallback(async (): Promise<ImportResult> => {
    setIsImporting(true)
    setProgress(0)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Tauri API –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
      const selectedFiles = await selectAudioFile()

      if (!selectedFiles || selectedFiles.length === 0) {
        setIsImporting(false)
        return {
          success: false,
          message: "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
          files: [],
        }
      }

      console.log(`–í—ã–±—Ä–∞–Ω–æ ${selectedFiles.length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤`)

      // –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const processedFiles = await processFiles(selectedFiles)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç)
      await saveFilesToProject(processedFiles)

      setIsImporting(false)
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ loadMusicMetadataSequentially

      return {
        success: true,
        message: `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${processedFiles.length} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`,
        files: processedFiles,
      }
    } catch (error: unknown) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", error)
      setIsImporting(false)
      return {
        success: false,
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${error}`,
        files: [],
      }
    }
  }, [processFiles, saveFilesToProject])

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  const importDirectory = useCallback(async (): Promise<ImportResult> => {
    setIsImporting(true)
    setProgress(0)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Tauri API –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const selectedDir = await selectMediaDirectory()

      if (!selectedDir) {
        setIsImporting(false)
        return {
          success: false,
          message: "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
          files: [],
        }
      }

      console.log("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞:", selectedDir)

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const mediaFiles = await invoke<string[]>("get_media_files", {
        directory: selectedDir,
      })

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
      const audioFiles = mediaFiles.filter((file: string) => {
        const extension = file.split(".").pop()?.toLowerCase() ?? ""
        return ["mp3", "wav", "ogg", "flac", "aac", "m4a", "wma"].includes(extension)
      })

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${audioFiles.length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏`)

      if (audioFiles.length === 0) {
        setIsImporting(false)
        return {
          success: false,
          message: "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤",
          files: [],
        }
      }

      // –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const processedFiles = await processFiles(audioFiles)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç)
      await saveFilesToProject(processedFiles)

      setIsImporting(false)
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ loadMusicMetadataSequentially

      return {
        success: true,
        message: `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${processedFiles.length} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`,
        files: processedFiles,
      }
    } catch (error: unknown) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–∞–ø–∫–∏ —Å –º—É–∑—ã–∫–æ–π:", error)
      setIsImporting(false)
      return {
        success: false,
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${error}`,
        files: [],
      }
    }
  }, [processFiles, saveFilesToProject])

  return {
    importFile,
    importDirectory,
    isImporting,
    progress,
  }
}

import { useCallback, useMemo } from "react";

import { useTranslation } from "react-i18next";

import { useBrowserState } from "@/components/common/browser-state-provider";
import { ContentGroup } from "@/components/common/content-group";
import { useMedia } from "@/features/browser/media";
import { StyleTemplatePreview } from "@/features/style-templates/components/style-template-preview";
import { PREVIEW_SIZES } from "@/lib/constants/preview-sizes";

import { useStyleTemplates } from "../hooks";
import { StyleTemplate } from "../types";

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π —Ç—É–ª–±–∞—Ä –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
export function StyleTemplateList(): React.ReactElement {
  const { t, i18n } = useTranslation();
  const { templates, loading, error } = useStyleTemplates();
  const media = useMedia(); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const isItemFavorite = useCallback(
    (item: any, type: string) => {
      return media.isItemFavorite(item, type);
    },
    [media.isItemFavorite],
  );

  // console.log("üé® [StyleTemplateList] Render:", templates.length, "templates");

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
  const currentLanguage = (i18n.language || "ru") as "ru" | "en";

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
  const { currentTabSettings } = useBrowserState();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–±—â–µ–≥–æ —Ç—É–ª–±–∞—Ä–∞
  const {
    searchQuery,
    showFavoritesOnly,
    sortBy,
    sortOrder,
    groupBy,
    filterType,
    previewSizeIndex,
  } = currentTabSettings;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é –∏–∑ –º–∞—Å—Å–∏–≤–∞
  const basePreviewSize = PREVIEW_SIZES[previewSizeIndex];

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
   */
  const processedTemplates = useMemo(() => {
    // 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    const filtered = templates.filter((template) => {
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
      const matchesFavorites =
        !showFavoritesOnly ||
        isItemFavorite(
          { id: template.id, path: "", name: template.name[currentLanguage] },
          "template",
        );

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
      const matchesSearch =
        !searchQuery ||
        template.name[currentLanguage]
          .toLowerCase()
          .includes(searchQuery.toLowerCase()) ||
        template.name.ru.toLowerCase().includes(searchQuery.toLowerCase()) ||
        template.name.en.toLowerCase().includes(searchQuery.toLowerCase()) ||
        template.category.toLowerCase().includes(searchQuery.toLowerCase()) ||
        template.style.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (template.description?.ru || "")
          .toLowerCase()
          .includes(searchQuery.toLowerCase()) ||
        (template.description?.en || "")
          .toLowerCase()
          .includes(searchQuery.toLowerCase()) ||
        (template.tags?.[currentLanguage] || []).some((tag: string) =>
          tag.toLowerCase().includes(searchQuery.toLowerCase()),
        ) ||
        (template.tags?.ru || []).some((tag: string) =>
          tag.toLowerCase().includes(searchQuery.toLowerCase()),
        ) ||
        (template.tags?.en || []).some((tag: string) =>
          tag.toLowerCase().includes(searchQuery.toLowerCase()),
        );

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Å—Ç–∏–ª—å)
      const matchesFilter = (() => {
        if (filterType === "all") return true;

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (
          [
            "intro",
            "outro",
            "lower-third",
            "title",
            "transition",
            "overlay",
          ].includes(filterType)
        ) {
          return template.category === filterType;
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∏–ª—é
        if (
          [
            "modern",
            "vintage",
            "minimal",
            "corporate",
            "creative",
            "cinematic",
          ].includes(filterType)
        ) {
          return template.style === filterType;
        }

        return true;
      })();

      return matchesFavorites && matchesSearch && matchesFilter;
    });

    // 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      let result = 0;

      switch (sortBy) {
        case "name":
          const nameA =
            typeof a.name === "string"
              ? a.name
              : a.name?.[currentLanguage] || a.name?.en || "";
          const nameB =
            typeof b.name === "string"
              ? b.name
              : b.name?.[currentLanguage] || b.name?.en || "";
          result = nameA.toLowerCase().localeCompare(nameB.toLowerCase());
          break;
        case "category":
          result = a.category.localeCompare(b.category);
          break;
        case "style":
          result = a.style.localeCompare(b.style);
          break;
        case "duration":
          result = a.duration - b.duration;
          break;
        default:
          result = 0;
      }

      return sortOrder === "asc" ? result : -result;
    });

    return filtered;
  }, [
    templates,
    searchQuery,
    showFavoritesOnly,
    filterType,
    sortBy,
    sortOrder,
    currentLanguage,
    isItemFavorite,
  ]);

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
   */
  const groupedTemplates = useMemo(() => {
    if (groupBy === "none") {
      return [{ title: "", templates: processedTemplates }];
    }

    const groups: Record<string, StyleTemplate[]> = {};

    processedTemplates.forEach((template) => {
      let groupKey = "";

      switch (groupBy) {
        case "category":
          groupKey = template.category;
          break;
        case "style":
          groupKey = template.style;
          break;
        case "duration":
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –∫–æ—Ä–æ—Ç–∫–∏–µ (<=3—Å), —Å—Ä–µ–¥–Ω–∏–µ (3-6—Å), –¥–ª–∏–Ω–Ω—ã–µ (>6—Å)
          if (template.duration <= 3) {
            groupKey = "short";
          } else if (template.duration <= 6) {
            groupKey = "medium";
          } else {
            groupKey = "long";
          }
          break;
        default:
          groupKey = "ungrouped";
      }

      if (!groups[groupKey]) {
        groups[groupKey] = [];
      }
      groups[groupKey].push(template);
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    return Object.entries(groups)
      .map(([key, templates]) => {
        let title = "";

        switch (groupBy) {
          case "category":
            title = t(`styleTemplates.categories.${key}`, key);
            break;
          case "style":
            title = t(`styleTemplates.styles.${key}`, key);
            break;
          case "duration":
            const durationTitles = {
              short: t("styleTemplates.duration.short", "–ö–æ—Ä–æ—Ç–∫–∏–µ (‚â§3—Å)"),
              medium: t("styleTemplates.duration.medium", "–°—Ä–µ–¥–Ω–∏–µ (3-6—Å)"),
              long: t("styleTemplates.duration.long", "–î–ª–∏–Ω–Ω—ã–µ (>6—Å)"),
            };
            title = durationTitles[key as keyof typeof durationTitles] || key;
            break;
          default:
            title = key;
        }

        return { title, templates };
      })
      .sort((a, b) => a.title.localeCompare(b.title));
  }, [processedTemplates, groupBy]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const itemsContainerStyle = useMemo(
    () => ({
      gridTemplateColumns: `repeat(auto-fill, minmax(${basePreviewSize}px, 1fr))`,
    }),
    [basePreviewSize],
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
  const handleTemplateSelect = useCallback((templateId: string) => {
    console.log("–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω:", templateId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="flex h-full flex-1 flex-col bg-background">
        <div className="flex h-32 items-center justify-center text-gray-500">
          <div className="flex items-center gap-2">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-900"></div>
            {t("common.loading")}...
          </div>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
  if (error) {
    return (
      <div className="flex h-full flex-1 flex-col bg-background">
        <div className="flex h-32 items-center justify-center text-red-500">
          <div className="text-center">
            <div className="text-sm font-medium">
              {t("styleTemplates.error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")}
            </div>
            <div className="text-xs mt-1">{error}</div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-full flex-1 flex-col bg-background">
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
      <div className="scrollbar-hide hover:scrollbar-default min-h-0 flex-1 overflow-y-auto p-1 py-3">
        {processedTemplates.length === 0 ? (
          <div className="flex h-full items-center justify-center text-gray-500">
            {showFavoritesOnly
              ? t("browser.media.noFavorites")
              : t("common.noResults")}
          </div>
        ) : (
          /* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ */
          <div className="space-y-4">
            {groupedTemplates.map((group) => (
              <ContentGroup
                key={group.title || "ungrouped"}
                title={group.title}
                items={group.templates}
                viewMode="thumbnails"
                renderItem={(template: StyleTemplate) => (
                  <StyleTemplatePreview
                    key={template.id}
                    template={template}
                    size={basePreviewSize}
                    onSelect={handleTemplateSelect}
                  />
                )}
                itemsContainerClassName="grid gap-3"
                itemsContainerStyle={itemsContainerStyle}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

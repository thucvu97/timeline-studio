#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run update-version 0.27.0
 */

const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const newVersion = process.argv[2];

if (!newVersion) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run update-version <–≤–µ—Ä—Å–∏—è>');
  console.log('–ü—Ä–∏–º–µ—Ä: npm run update-version 0.27.0');
  process.exit(1);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏
const versionRegex = /^\d+\.\d+\.\d+(-[a-zA-Z0-9-.]+)?$/;
if (!versionRegex.test(newVersion)) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏');
  console.log('–í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: X.Y.Z –∏–ª–∏ X.Y.Z-suffix');
  process.exit(1);
}

console.log(`üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ ${newVersion}`);

// –§–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const filesToUpdate = [
  {
    path: 'package.json',
    type: 'json',
    field: 'version'
  },
  {
    path: 'src-tauri/Cargo.toml',
    type: 'toml',
    pattern: /^version = ".*"$/m,
    replacement: `version = "${newVersion}"`
  },
  {
    path: 'src-tauri/tauri.conf.json',
    type: 'json',
    field: 'version'
  },
  {
    path: 'src/test/mocks/tauri/api/app.ts',
    type: 'typescript',
    pattern: /return Promise\.resolve\("[\d.]+(?:-[a-zA-Z0-9-.]+)?"\)/,
    replacement: `return Promise.resolve("${newVersion}")`
  }
];

let successCount = 0;
let errorCount = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON —Ñ–∞–π–ª–æ–≤
function updateJsonFile(filePath, field, version) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const data = JSON.parse(content);
    data[field] = version;
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2) + '\n');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
    successCount++;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}: ${error.message}`);
    errorCount++;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
function updateFileWithRegex(filePath, pattern, replacement) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const updatedContent = content.replace(pattern, replacement);
    
    if (content === updatedContent) {
      console.warn(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${filePath}`);
      return;
    }
    
    fs.writeFileSync(filePath, updatedContent);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
    successCount++;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}: ${error.message}`);
    errorCount++;
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
filesToUpdate.forEach(file => {
  const fullPath = path.join(process.cwd(), file.path);
  
  if (!fs.existsSync(fullPath)) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.path}`);
    return;
  }
  
  switch (file.type) {
    case 'json':
      updateJsonFile(fullPath, file.field, newVersion);
      break;
    case 'toml':
    case 'typescript':
      updateFileWithRegex(fullPath, file.pattern, file.replacement);
      break;
  }
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ —Å TODO
const projectServicePath = path.join(process.cwd(), 'src/features/app-state/services/timeline-studio-project-service.ts');
if (fs.existsSync(projectServicePath)) {
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ timeline-studio-project-service.ts...');
  const content = fs.readFileSync(projectServicePath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ getVersion()
  if (content.includes('getVersion()')) {
    console.log('‚úÖ –§–∞–π–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç getVersion() - –æ—Ç–ª–∏—á–Ω–æ!');
  } else if (content.includes('version: "1.0.0"')) {
    console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í —Ñ–∞–π–ª–µ timeline-studio-project-service.ts –Ω–∞–π–¥–µ–Ω–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è "1.0.0"');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞: version: await getVersion()');
    console.log('   –°–º. —Ñ–∞–π–ª VERSION_MANAGEMENT.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π');
  }
}

// –ò—Ç–æ–≥–∏
console.log('\nüìä –ò—Ç–æ–≥–∏:');
console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${successCount}`);
if (errorCount > 0) {
  console.log(`‚ùå –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${errorCount}`);
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git diff');
console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm test');
console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–º–∏—Ç: git commit -am "chore: update version to ' + newVersion + '"');
console.log('4. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥: git tag v' + newVersion);

console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!');
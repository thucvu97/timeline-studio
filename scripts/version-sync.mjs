#!/usr/bin/env node

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π –¥–ª—è Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CI/CD
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  strategy: process.env.VERSION_STRATEGY || 'manual', // manual, cargo, package
  files: {
    package: 'package.json',
    cargo: 'src-tauri/Cargo.toml',
    tauri: 'src-tauri/tauri.conf.json',
    mock: 'src/test/mocks/tauri/api/app.ts'
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
 */
function getSourceVersion() {
  switch (config.strategy) {
    case 'cargo':
      return getCargoVersion();
    case 'package':
      return getPackageVersion();
    default:
      return process.argv[2];
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ Cargo.toml
 */
function getCargoVersion() {
  const cargoPath = join(rootDir, config.files.cargo);
  const content = readFileSync(cargoPath, 'utf8');
  const match = content.match(/^version = "(.+)"$/m);
  return match ? match[1] : null;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ package.json
 */
function getPackageVersion() {
  const packagePath = join(rootDir, config.files.package);
  const pkg = JSON.parse(readFileSync(packagePath, 'utf8'));
  return pkg.version;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ —Ñ–∞–π–ª–µ
 */
function updateVersion(filePath, version, updater) {
  const fullPath = join(rootDir, filePath);
  
  if (!existsSync(fullPath)) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }
  
  try {
    updater(fullPath, version);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath} ‚Üí ${version}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${filePath}: ${error.message}`);
    return false;
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
 */
const updaters = {
  json: (path, version) => {
    const data = JSON.parse(readFileSync(path, 'utf8'));
    data.version = version;
    writeFileSync(path, JSON.stringify(data, null, 2) + '\n');
  },
  
  toml: (path, version) => {
    let content = readFileSync(path, 'utf8');
    content = content.replace(/^version = ".*"$/m, `version = "${version}"`);
    writeFileSync(path, content);
  },
  
  typescript: (path, version) => {
    let content = readFileSync(path, 'utf8');
    content = content.replace(
      /return Promise\.resolve\("[\d.]+(?:-[a-zA-Z0-9-.]+)?"\)/,
      `return Promise.resolve("${version}")`
    );
    writeFileSync(path, content);
  }
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üîÑ Timeline Studio Version Sync\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
  const version = getSourceVersion();
  
  if (!version) {
    console.error('‚ùå –í–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
    console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  npm run version:sync <version>');
    console.log('  VERSION_STRATEGY=cargo npm run version:sync');
    console.log('  VERSION_STRATEGY=package npm run version:sync');
    process.exit(1);
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏
  if (!/^\d+\.\d+\.\d+(-[a-zA-Z0-9-.]+)?$/.test(version)) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏:', version);
    process.exit(1);
  }
  
  console.log(`üìå –í–µ—Ä—Å–∏—è: ${version}`);
  console.log(`üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${config.strategy}\n`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
  let success = 0;
  let failed = 0;
  
  // package.json
  if (config.strategy !== 'package') {
    const result = updateVersion(config.files.package, version, updaters.json);
    result ? success++ : failed++;
  }
  
  // Cargo.toml
  if (config.strategy !== 'cargo') {
    const result = updateVersion(config.files.cargo, version, updaters.toml);
    result ? success++ : failed++;
  }
  
  // tauri.conf.json (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å version –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
  const tauriPath = join(rootDir, config.files.tauri);
  if (existsSync(tauriPath)) {
    const tauriConfig = JSON.parse(readFileSync(tauriPath, 'utf8'));
    if (tauriConfig.version !== undefined) {
      const result = updateVersion(config.files.tauri, version, updaters.json);
      result ? success++ : failed++;
    } else {
      console.log('‚ÑπÔ∏è  tauri.conf.json –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ Cargo.toml');
    }
  }
  
  // –¢–µ—Å—Ç–æ–≤—ã–π –º–æ–∫
  const result = updateVersion(config.files.mock, version, updaters.typescript);
  result ? success++ : failed++;
  
  // –ò—Ç–æ–≥–∏
  console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${success}`);
  if (failed > 0) console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  
  // Git –æ–ø–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ –≤ CI)
  if (!process.env.CI) {
    console.log('\nüîç Git —Å—Ç–∞—Ç—É—Å:');
    try {
      console.log(execSync('git diff --stat', { encoding: 'utf8' }));
      
      console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log(`1. git add -A`);
      console.log(`2. git commit -m "chore: bump version to ${version}"`);
      console.log(`3. git tag v${version}`);
      console.log(`4. git push && git push --tags`);
    } catch (e) {
      // –ù–µ –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    }
  }
  
  process.exit(failed > 0 ? 1 : 0);
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);